{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "### Segunda Entrega\n",
        "\n",
        "- Camila Rodríguez, C36624\n",
        "- Leonardo Sibaja, C37537\n",
        "- Jordan Obando, C25597"
      ],
      "metadata": {
        "id": "o7eQ_Og8C7jN"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5zP0Jws-73iB"
      },
      "outputs": [],
      "source": [
        "#Punto 1: Incluir más bases de datos\n",
        "\n",
        "#Cargar Base de Datos\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import sympy as sp\n",
        "import math\n",
        "import statsmodels.api as sm\n",
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from scipy.stats import kstest\n",
        "\n",
        "\n",
        "# Imports bases de datos\n",
        "countryComparison = pd.read_csv('/content/country_comparison_large_dataset.csv')\n",
        "life = pd.read_csv('/content/Quality of life in a country comparison.csv')\n",
        "globalProsperity = pd.read_csv('/content/global_prosperity_regions_politics.csv')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Imprimir bases de datos\n",
        "\n",
        "print(\"Country Comparison\")\n",
        "countryComparison"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 531
        },
        "id": "AK3qmmHrZg1A",
        "outputId": "9f32440e-5cc5-4927-e165-d39381287c3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Country Comparison\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Country  Year  GDP (in Trillions USD)  GDP per Capita (in USD)  \\\n",
              "0          USA  2000                   20.87                  65455.0   \n",
              "1       Russia  2000                    1.64                  10923.0   \n",
              "2       Canada  2000                    1.65                  47932.0   \n",
              "3        China  2000                   13.64                  10060.0   \n",
              "4        India  2000                    2.98                   2102.1   \n",
              "..         ...   ...                     ...                      ...   \n",
              "139     Russia  2023                    1.64                  10978.0   \n",
              "140     Canada  2023                    1.73                  44804.0   \n",
              "141      China  2023                   13.72                   9870.0   \n",
              "142      India  2023                    2.79                   2070.6   \n",
              "143  Australia  2023                    1.27                  51304.0   \n",
              "\n",
              "     Inflation Rate (%)  Population (in Millions)  Population Growth Rate (%)  \\\n",
              "0                  2.28                    330.34                        0.58   \n",
              "1                  3.25                    141.81                        0.10   \n",
              "2                  1.96                     36.63                        0.90   \n",
              "3                  2.43                   1446.93                        0.31   \n",
              "4                  4.87                   1313.76                        1.04   \n",
              "..                  ...                       ...                         ...   \n",
              "139                3.20                    138.04                        0.10   \n",
              "140                1.88                     35.59                        0.93   \n",
              "141                2.29                   1407.79                        0.29   \n",
              "142                4.70                   1411.74                        1.03   \n",
              "143                1.54                     24.38                        1.36   \n",
              "\n",
              "     Urban Population (%)  Life Expectancy (Years)  \\\n",
              "0                   83.42                    78.39   \n",
              "1                   72.67                    69.91   \n",
              "2                   79.54                    84.60   \n",
              "3                   58.56                    76.09   \n",
              "4                   34.09                    68.78   \n",
              "..                    ...                      ...   \n",
              "139                 71.56                    73.47   \n",
              "140                 83.11                    79.17   \n",
              "141                 61.86                    73.10   \n",
              "142                 34.05                    70.09   \n",
              "143                 84.37                    83.40   \n",
              "\n",
              "     Healthcare Expenditure per Capita (USD)  ...  Poverty Rate (%)  \\\n",
              "0                                   11209.00  ...             10.98   \n",
              "1                                     534.45  ...             12.89   \n",
              "2                                    5113.50  ...              9.46   \n",
              "3                                     459.00  ...              2.04   \n",
              "4                                      76.07  ...             22.25   \n",
              "..                                       ...  ...               ...   \n",
              "139                                   539.70  ...             12.36   \n",
              "140                                  5139.75  ...              9.24   \n",
              "141                                   430.20  ...              1.92   \n",
              "142                                    76.07  ...             21.94   \n",
              "143                                  5434.00  ...              9.99   \n",
              "\n",
              "     Number of International Visitors (in Millions)  \\\n",
              "0                                             80.80   \n",
              "1                                             24.70   \n",
              "2                                             22.33   \n",
              "3                                             62.20   \n",
              "4                                             11.25   \n",
              "..                                              ...   \n",
              "139                                           24.55   \n",
              "140                                           21.32   \n",
              "141                                           64.67   \n",
              "142                                           10.74   \n",
              "143                                            9.77   \n",
              "\n",
              "     Tourism Revenue (in Billion USD)  Agricultural Land (%)  \\\n",
              "0                              210.98                  42.37   \n",
              "1                               36.47                  12.53   \n",
              "2                               29.52                   7.22   \n",
              "3                              115.80                  54.00   \n",
              "4                               29.12                  57.60   \n",
              "..                                ...                    ...   \n",
              "139                             35.28                  12.54   \n",
              "140                             29.13                   6.96   \n",
              "141                            116.76                  56.54   \n",
              "142                             28.00                  57.36   \n",
              "143                             58.26                  53.80   \n",
              "\n",
              "     Unemployment Rate (%)  Labor Force Participation Rate (%)  \\\n",
              "0                     3.55                               65.52   \n",
              "1                     4.63                               57.54   \n",
              "2                     5.43                               65.06   \n",
              "3                     3.68                               63.13   \n",
              "4                     7.31                               52.10   \n",
              "..                     ...                                 ...   \n",
              "139                   4.69                               58.62   \n",
              "140                   5.44                               64.61   \n",
              "141                   3.58                               65.77   \n",
              "142                   7.16                               48.25   \n",
              "143                   4.75                               69.23   \n",
              "\n",
              "     Crime Rate (per 100,000)  Corruption Perception Index  \\\n",
              "0                      287.40                        67.41   \n",
              "1                      497.50                        30.90   \n",
              "2                      795.20                        74.74   \n",
              "3                      102.90                        41.75   \n",
              "4                      245.25                        40.12   \n",
              "..                        ...                          ...   \n",
              "139                    477.50                        31.02   \n",
              "140                    800.80                        72.37   \n",
              "141                     95.30                        43.22   \n",
              "142                    240.75                        41.36   \n",
              "143                    910.80                        75.92   \n",
              "\n",
              "     Freedom of Press Index  Voting Participation Rate (%)  \n",
              "0                     45.27                          68.81  \n",
              "1                    146.10                          65.00  \n",
              "2                     16.42                          63.00  \n",
              "3                    185.32                          72.14  \n",
              "4                    136.36                          67.65  \n",
              "..                      ...                            ...  \n",
              "139                  150.15                          65.33  \n",
              "140                   15.52                          62.28  \n",
              "141                  184.26                          71.14  \n",
              "142                  133.28                          66.20  \n",
              "143                   25.88                          94.39  \n",
              "\n",
              "[144 rows x 36 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-95bf399f-39cf-4e51-97d2-ffda623cbe18\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Year</th>\n",
              "      <th>GDP (in Trillions USD)</th>\n",
              "      <th>GDP per Capita (in USD)</th>\n",
              "      <th>Inflation Rate (%)</th>\n",
              "      <th>Population (in Millions)</th>\n",
              "      <th>Population Growth Rate (%)</th>\n",
              "      <th>Urban Population (%)</th>\n",
              "      <th>Life Expectancy (Years)</th>\n",
              "      <th>Healthcare Expenditure per Capita (USD)</th>\n",
              "      <th>...</th>\n",
              "      <th>Poverty Rate (%)</th>\n",
              "      <th>Number of International Visitors (in Millions)</th>\n",
              "      <th>Tourism Revenue (in Billion USD)</th>\n",
              "      <th>Agricultural Land (%)</th>\n",
              "      <th>Unemployment Rate (%)</th>\n",
              "      <th>Labor Force Participation Rate (%)</th>\n",
              "      <th>Crime Rate (per 100,000)</th>\n",
              "      <th>Corruption Perception Index</th>\n",
              "      <th>Freedom of Press Index</th>\n",
              "      <th>Voting Participation Rate (%)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>USA</td>\n",
              "      <td>2000</td>\n",
              "      <td>20.87</td>\n",
              "      <td>65455.0</td>\n",
              "      <td>2.28</td>\n",
              "      <td>330.34</td>\n",
              "      <td>0.58</td>\n",
              "      <td>83.42</td>\n",
              "      <td>78.39</td>\n",
              "      <td>11209.00</td>\n",
              "      <td>...</td>\n",
              "      <td>10.98</td>\n",
              "      <td>80.80</td>\n",
              "      <td>210.98</td>\n",
              "      <td>42.37</td>\n",
              "      <td>3.55</td>\n",
              "      <td>65.52</td>\n",
              "      <td>287.40</td>\n",
              "      <td>67.41</td>\n",
              "      <td>45.27</td>\n",
              "      <td>68.81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Russia</td>\n",
              "      <td>2000</td>\n",
              "      <td>1.64</td>\n",
              "      <td>10923.0</td>\n",
              "      <td>3.25</td>\n",
              "      <td>141.81</td>\n",
              "      <td>0.10</td>\n",
              "      <td>72.67</td>\n",
              "      <td>69.91</td>\n",
              "      <td>534.45</td>\n",
              "      <td>...</td>\n",
              "      <td>12.89</td>\n",
              "      <td>24.70</td>\n",
              "      <td>36.47</td>\n",
              "      <td>12.53</td>\n",
              "      <td>4.63</td>\n",
              "      <td>57.54</td>\n",
              "      <td>497.50</td>\n",
              "      <td>30.90</td>\n",
              "      <td>146.10</td>\n",
              "      <td>65.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Canada</td>\n",
              "      <td>2000</td>\n",
              "      <td>1.65</td>\n",
              "      <td>47932.0</td>\n",
              "      <td>1.96</td>\n",
              "      <td>36.63</td>\n",
              "      <td>0.90</td>\n",
              "      <td>79.54</td>\n",
              "      <td>84.60</td>\n",
              "      <td>5113.50</td>\n",
              "      <td>...</td>\n",
              "      <td>9.46</td>\n",
              "      <td>22.33</td>\n",
              "      <td>29.52</td>\n",
              "      <td>7.22</td>\n",
              "      <td>5.43</td>\n",
              "      <td>65.06</td>\n",
              "      <td>795.20</td>\n",
              "      <td>74.74</td>\n",
              "      <td>16.42</td>\n",
              "      <td>63.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>China</td>\n",
              "      <td>2000</td>\n",
              "      <td>13.64</td>\n",
              "      <td>10060.0</td>\n",
              "      <td>2.43</td>\n",
              "      <td>1446.93</td>\n",
              "      <td>0.31</td>\n",
              "      <td>58.56</td>\n",
              "      <td>76.09</td>\n",
              "      <td>459.00</td>\n",
              "      <td>...</td>\n",
              "      <td>2.04</td>\n",
              "      <td>62.20</td>\n",
              "      <td>115.80</td>\n",
              "      <td>54.00</td>\n",
              "      <td>3.68</td>\n",
              "      <td>63.13</td>\n",
              "      <td>102.90</td>\n",
              "      <td>41.75</td>\n",
              "      <td>185.32</td>\n",
              "      <td>72.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>India</td>\n",
              "      <td>2000</td>\n",
              "      <td>2.98</td>\n",
              "      <td>2102.1</td>\n",
              "      <td>4.87</td>\n",
              "      <td>1313.76</td>\n",
              "      <td>1.04</td>\n",
              "      <td>34.09</td>\n",
              "      <td>68.78</td>\n",
              "      <td>76.07</td>\n",
              "      <td>...</td>\n",
              "      <td>22.25</td>\n",
              "      <td>11.25</td>\n",
              "      <td>29.12</td>\n",
              "      <td>57.60</td>\n",
              "      <td>7.31</td>\n",
              "      <td>52.10</td>\n",
              "      <td>245.25</td>\n",
              "      <td>40.12</td>\n",
              "      <td>136.36</td>\n",
              "      <td>67.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139</th>\n",
              "      <td>Russia</td>\n",
              "      <td>2023</td>\n",
              "      <td>1.64</td>\n",
              "      <td>10978.0</td>\n",
              "      <td>3.20</td>\n",
              "      <td>138.04</td>\n",
              "      <td>0.10</td>\n",
              "      <td>71.56</td>\n",
              "      <td>73.47</td>\n",
              "      <td>539.70</td>\n",
              "      <td>...</td>\n",
              "      <td>12.36</td>\n",
              "      <td>24.55</td>\n",
              "      <td>35.28</td>\n",
              "      <td>12.54</td>\n",
              "      <td>4.69</td>\n",
              "      <td>58.62</td>\n",
              "      <td>477.50</td>\n",
              "      <td>31.02</td>\n",
              "      <td>150.15</td>\n",
              "      <td>65.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>Canada</td>\n",
              "      <td>2023</td>\n",
              "      <td>1.73</td>\n",
              "      <td>44804.0</td>\n",
              "      <td>1.88</td>\n",
              "      <td>35.59</td>\n",
              "      <td>0.93</td>\n",
              "      <td>83.11</td>\n",
              "      <td>79.17</td>\n",
              "      <td>5139.75</td>\n",
              "      <td>...</td>\n",
              "      <td>9.24</td>\n",
              "      <td>21.32</td>\n",
              "      <td>29.13</td>\n",
              "      <td>6.96</td>\n",
              "      <td>5.44</td>\n",
              "      <td>64.61</td>\n",
              "      <td>800.80</td>\n",
              "      <td>72.37</td>\n",
              "      <td>15.52</td>\n",
              "      <td>62.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>China</td>\n",
              "      <td>2023</td>\n",
              "      <td>13.72</td>\n",
              "      <td>9870.0</td>\n",
              "      <td>2.29</td>\n",
              "      <td>1407.79</td>\n",
              "      <td>0.29</td>\n",
              "      <td>61.86</td>\n",
              "      <td>73.10</td>\n",
              "      <td>430.20</td>\n",
              "      <td>...</td>\n",
              "      <td>1.92</td>\n",
              "      <td>64.67</td>\n",
              "      <td>116.76</td>\n",
              "      <td>56.54</td>\n",
              "      <td>3.58</td>\n",
              "      <td>65.77</td>\n",
              "      <td>95.30</td>\n",
              "      <td>43.22</td>\n",
              "      <td>184.26</td>\n",
              "      <td>71.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>142</th>\n",
              "      <td>India</td>\n",
              "      <td>2023</td>\n",
              "      <td>2.79</td>\n",
              "      <td>2070.6</td>\n",
              "      <td>4.70</td>\n",
              "      <td>1411.74</td>\n",
              "      <td>1.03</td>\n",
              "      <td>34.05</td>\n",
              "      <td>70.09</td>\n",
              "      <td>76.07</td>\n",
              "      <td>...</td>\n",
              "      <td>21.94</td>\n",
              "      <td>10.74</td>\n",
              "      <td>28.00</td>\n",
              "      <td>57.36</td>\n",
              "      <td>7.16</td>\n",
              "      <td>48.25</td>\n",
              "      <td>240.75</td>\n",
              "      <td>41.36</td>\n",
              "      <td>133.28</td>\n",
              "      <td>66.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>143</th>\n",
              "      <td>Australia</td>\n",
              "      <td>2023</td>\n",
              "      <td>1.27</td>\n",
              "      <td>51304.0</td>\n",
              "      <td>1.54</td>\n",
              "      <td>24.38</td>\n",
              "      <td>1.36</td>\n",
              "      <td>84.37</td>\n",
              "      <td>83.40</td>\n",
              "      <td>5434.00</td>\n",
              "      <td>...</td>\n",
              "      <td>9.99</td>\n",
              "      <td>9.77</td>\n",
              "      <td>58.26</td>\n",
              "      <td>53.80</td>\n",
              "      <td>4.75</td>\n",
              "      <td>69.23</td>\n",
              "      <td>910.80</td>\n",
              "      <td>75.92</td>\n",
              "      <td>25.88</td>\n",
              "      <td>94.39</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>144 rows × 36 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95bf399f-39cf-4e51-97d2-ffda623cbe18')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-95bf399f-39cf-4e51-97d2-ffda623cbe18 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-95bf399f-39cf-4e51-97d2-ffda623cbe18');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-536aacd9-83c7-413c-a5c1-4d183f8b7c46\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-536aacd9-83c7-413c-a5c1-4d183f8b7c46')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-536aacd9-83c7-413c-a5c1-4d183f8b7c46 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ef0bb49f-cf00-494b-a150-a71fdd55c5f4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('countryComparison')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ef0bb49f-cf00-494b-a150-a71fdd55c5f4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('countryComparison');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "countryComparison"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Life\")\n",
        "life"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "mUk2vQoJaEBo",
        "outputId": "41fe1c23-97f4-4e61-ab6f-b11243f886a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Life\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Unnamed: 0  Rank                Country  Stability(15%)  Rights(20%)  \\\n",
              "0             0     1              Australia              86           92   \n",
              "1             1     2             San Marino              81           82   \n",
              "2             2     3              Hong Kong              77           85   \n",
              "3             3     4            Switzerland              91           99   \n",
              "4             4     5                  Macao              90           71   \n",
              "..          ...   ...                    ...             ...          ...   \n",
              "132         132   133               Cameroon              40           19   \n",
              "133         133   134                Nigeria              18           24   \n",
              "134         134   135                   Chad              46           12   \n",
              "135         135   136                  Sudan               8           11   \n",
              "136         136   137  Congo (Dem. Republic)              32            7   \n",
              "\n",
              "     Health(15%)  Safety(10%)  Climate(15%)  Costs(15%)  Popularity(10%)  \\\n",
              "0             87          100            90          23               41   \n",
              "1             91           87            62          61               47   \n",
              "2            100           97            49          61               41   \n",
              "3             93           99            34          44               46   \n",
              "4            100           93            48          61               44   \n",
              "..           ...          ...           ...         ...              ...   \n",
              "132            9           27            60          51               34   \n",
              "133           12           23            53          57               41   \n",
              "134            0           31            50          49               44   \n",
              "135           18           55            40          66               24   \n",
              "136            6           10            54          60               36   \n",
              "\n",
              "     TotalQuality of life(100%)  \n",
              "0                            76  \n",
              "1                            74  \n",
              "2                            74  \n",
              "3                            74  \n",
              "4                            73  \n",
              "..                          ...  \n",
              "132                          34  \n",
              "133                          32  \n",
              "134                          32  \n",
              "135                          30  \n",
              "136                          29  \n",
              "\n",
              "[137 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dac54dd1-85cd-43f0-bd39-eb7208a1e25c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Rank</th>\n",
              "      <th>Country</th>\n",
              "      <th>Stability(15%)</th>\n",
              "      <th>Rights(20%)</th>\n",
              "      <th>Health(15%)</th>\n",
              "      <th>Safety(10%)</th>\n",
              "      <th>Climate(15%)</th>\n",
              "      <th>Costs(15%)</th>\n",
              "      <th>Popularity(10%)</th>\n",
              "      <th>TotalQuality of life(100%)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>Australia</td>\n",
              "      <td>86</td>\n",
              "      <td>92</td>\n",
              "      <td>87</td>\n",
              "      <td>100</td>\n",
              "      <td>90</td>\n",
              "      <td>23</td>\n",
              "      <td>41</td>\n",
              "      <td>76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>San Marino</td>\n",
              "      <td>81</td>\n",
              "      <td>82</td>\n",
              "      <td>91</td>\n",
              "      <td>87</td>\n",
              "      <td>62</td>\n",
              "      <td>61</td>\n",
              "      <td>47</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>Hong Kong</td>\n",
              "      <td>77</td>\n",
              "      <td>85</td>\n",
              "      <td>100</td>\n",
              "      <td>97</td>\n",
              "      <td>49</td>\n",
              "      <td>61</td>\n",
              "      <td>41</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>Switzerland</td>\n",
              "      <td>91</td>\n",
              "      <td>99</td>\n",
              "      <td>93</td>\n",
              "      <td>99</td>\n",
              "      <td>34</td>\n",
              "      <td>44</td>\n",
              "      <td>46</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>Macao</td>\n",
              "      <td>90</td>\n",
              "      <td>71</td>\n",
              "      <td>100</td>\n",
              "      <td>93</td>\n",
              "      <td>48</td>\n",
              "      <td>61</td>\n",
              "      <td>44</td>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>132</th>\n",
              "      <td>132</td>\n",
              "      <td>133</td>\n",
              "      <td>Cameroon</td>\n",
              "      <td>40</td>\n",
              "      <td>19</td>\n",
              "      <td>9</td>\n",
              "      <td>27</td>\n",
              "      <td>60</td>\n",
              "      <td>51</td>\n",
              "      <td>34</td>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>133</th>\n",
              "      <td>133</td>\n",
              "      <td>134</td>\n",
              "      <td>Nigeria</td>\n",
              "      <td>18</td>\n",
              "      <td>24</td>\n",
              "      <td>12</td>\n",
              "      <td>23</td>\n",
              "      <td>53</td>\n",
              "      <td>57</td>\n",
              "      <td>41</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>134</th>\n",
              "      <td>134</td>\n",
              "      <td>135</td>\n",
              "      <td>Chad</td>\n",
              "      <td>46</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>31</td>\n",
              "      <td>50</td>\n",
              "      <td>49</td>\n",
              "      <td>44</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>135</th>\n",
              "      <td>135</td>\n",
              "      <td>136</td>\n",
              "      <td>Sudan</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>18</td>\n",
              "      <td>55</td>\n",
              "      <td>40</td>\n",
              "      <td>66</td>\n",
              "      <td>24</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>136</th>\n",
              "      <td>136</td>\n",
              "      <td>137</td>\n",
              "      <td>Congo (Dem. Republic)</td>\n",
              "      <td>32</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>10</td>\n",
              "      <td>54</td>\n",
              "      <td>60</td>\n",
              "      <td>36</td>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>137 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dac54dd1-85cd-43f0-bd39-eb7208a1e25c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dac54dd1-85cd-43f0-bd39-eb7208a1e25c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dac54dd1-85cd-43f0-bd39-eb7208a1e25c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-509c6492-2d51-4a8f-b3c5-9039870b81d2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-509c6492-2d51-4a8f-b3c5-9039870b81d2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-509c6492-2d51-4a8f-b3c5-9039870b81d2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_a568f76a-f3cf-4452-8bcf-606d00dd8d9a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('life')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a568f76a-f3cf-4452-8bcf-606d00dd8d9a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('life');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "life",
              "summary": "{\n  \"name\": \"life\",\n  \"rows\": 137,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39,\n        \"min\": 0,\n        \"max\": 136,\n        \"num_unique_values\": 137,\n        \"samples\": [\n          105,\n          104,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39,\n        \"min\": 1,\n        \"max\": 137,\n        \"num_unique_values\": 137,\n        \"samples\": [\n          106,\n          105,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 137,\n        \"samples\": [\n          \"Kyrgyzstan\",\n          \"Gambia\",\n          \"Portugal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stability(15%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19,\n        \"min\": 8,\n        \"max\": 93,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          10,\n          16,\n          86\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rights(20%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25,\n        \"min\": 7,\n        \"max\": 100,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          58,\n          92,\n          35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Health(15%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          68,\n          87,\n          74\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Safety(10%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21,\n        \"min\": 4,\n        \"max\": 100,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          76,\n          19,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Climate(15%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19,\n        \"min\": 2,\n        \"max\": 95,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          19,\n          35,\n          48\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Costs(15%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 23,\n        \"max\": 76,\n        \"num_unique_values\": 45,\n        \"samples\": [\n          60,\n          54,\n          32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Popularity(10%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 11,\n        \"max\": 73,\n        \"num_unique_values\": 44,\n        \"samples\": [\n          11,\n          65,\n          57\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TotalQuality of life(100%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 29,\n        \"max\": 76,\n        \"num_unique_values\": 42,\n        \"samples\": [\n          50,\n          62,\n          67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Global Prosperity\")\n",
        "globalProsperity"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "g5b8_faMaFBq",
        "outputId": "fbf01682-2dee-4323-c417-7c1a61406161"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Global Prosperity\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      country code  region     political_regime  \\\n",
              "0                     Denmark  DNK  Europe    Liberal democracy   \n",
              "1                      Sweden  SWE  Europe    Liberal democracy   \n",
              "2                      Norway  NOR  Europe    Liberal democracy   \n",
              "3                     Finland  FIN  Europe    Liberal democracy   \n",
              "4                 Switzerland  CHE  Europe    Liberal democracy   \n",
              "..                        ...  ...     ...                  ...   \n",
              "154                   Somalia  SOM  Africa     Closed autocracy   \n",
              "155               Afghanistan  AFG    Asia     Closed autocracy   \n",
              "156  Central African Republic  CAF  Africa  Electoral autocracy   \n",
              "157                     Yemen  YEM    Asia     Closed autocracy   \n",
              "158               South Sudan  SSD  Africa     Closed autocracy   \n",
              "\n",
              "     average_score  safety_and_security  personal_freedom  governance  \\\n",
              "0             6.00                  6.0               2.0         3.0   \n",
              "1             6.83                 10.0               4.0         7.0   \n",
              "2             7.25                  3.0               1.0         2.0   \n",
              "3             8.00                 15.0               3.0         1.0   \n",
              "4             6.75                  2.0              12.0         4.0   \n",
              "..             ...                  ...               ...         ...   \n",
              "154         153.62                160.0             141.0       161.0   \n",
              "155         154.25                166.0             148.0       149.0   \n",
              "156         150.38                157.0             135.0       155.0   \n",
              "157         156.88                165.0             159.0       166.0   \n",
              "158         157.62                167.0             158.0       164.0   \n",
              "\n",
              "     social_capital  investment_environment  enterprise_conditions  \\\n",
              "0               1.0                     8.0                    8.0   \n",
              "1               4.0                     6.0                   15.0   \n",
              "2               3.0                     9.0                   14.0   \n",
              "3               7.0                     2.0                   12.0   \n",
              "4              12.0                    12.0                    1.0   \n",
              "..              ...                     ...                    ...   \n",
              "154           143.0                   153.0                  140.0   \n",
              "155           166.0                   154.0                  139.0   \n",
              "156           160.0                   160.0                  149.0   \n",
              "157           157.0                   165.0                  160.0   \n",
              "158           163.0                   150.0                  156.0   \n",
              "\n",
              "     infrastructure_and_market_access  economic_quality  living_conditions  \\\n",
              "0                                 9.0               7.0                2.0   \n",
              "1                                 7.0               8.0                3.0   \n",
              "2                                20.0               5.0                4.0   \n",
              "3                                10.0              20.0                7.0   \n",
              "4                                11.0               2.0                5.0   \n",
              "..                                ...               ...                ...   \n",
              "154                             165.0             165.0              159.0   \n",
              "155                             159.0             152.0              153.0   \n",
              "156                             166.0             130.0              167.0   \n",
              "157                             156.0             164.0              148.0   \n",
              "158                             153.0             160.0              166.0   \n",
              "\n",
              "     health  education  natural_environment  \n",
              "0      16.0        5.0                  5.0  \n",
              "1       9.0        8.0                  1.0  \n",
              "2       7.0       10.0                  9.0  \n",
              "3      15.0        2.0                  2.0  \n",
              "4      10.0        4.0                  6.0  \n",
              "..      ...        ...                  ...  \n",
              "154   163.0      158.0                136.0  \n",
              "155   153.0      157.0                155.0  \n",
              "156   167.0      165.0                 93.0  \n",
              "157   136.0      155.0                152.0  \n",
              "158   166.0      164.0                125.0  \n",
              "\n",
              "[159 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-37bb55cf-dd42-48e5-a954-91b51be3d245\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>code</th>\n",
              "      <th>region</th>\n",
              "      <th>political_regime</th>\n",
              "      <th>average_score</th>\n",
              "      <th>safety_and_security</th>\n",
              "      <th>personal_freedom</th>\n",
              "      <th>governance</th>\n",
              "      <th>social_capital</th>\n",
              "      <th>investment_environment</th>\n",
              "      <th>enterprise_conditions</th>\n",
              "      <th>infrastructure_and_market_access</th>\n",
              "      <th>economic_quality</th>\n",
              "      <th>living_conditions</th>\n",
              "      <th>health</th>\n",
              "      <th>education</th>\n",
              "      <th>natural_environment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>DNK</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Liberal democracy</td>\n",
              "      <td>6.00</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Sweden</td>\n",
              "      <td>SWE</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Liberal democracy</td>\n",
              "      <td>6.83</td>\n",
              "      <td>10.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Norway</td>\n",
              "      <td>NOR</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Liberal democracy</td>\n",
              "      <td>7.25</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Finland</td>\n",
              "      <td>FIN</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Liberal democracy</td>\n",
              "      <td>8.00</td>\n",
              "      <td>15.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Switzerland</td>\n",
              "      <td>CHE</td>\n",
              "      <td>Europe</td>\n",
              "      <td>Liberal democracy</td>\n",
              "      <td>6.75</td>\n",
              "      <td>2.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>154</th>\n",
              "      <td>Somalia</td>\n",
              "      <td>SOM</td>\n",
              "      <td>Africa</td>\n",
              "      <td>Closed autocracy</td>\n",
              "      <td>153.62</td>\n",
              "      <td>160.0</td>\n",
              "      <td>141.0</td>\n",
              "      <td>161.0</td>\n",
              "      <td>143.0</td>\n",
              "      <td>153.0</td>\n",
              "      <td>140.0</td>\n",
              "      <td>165.0</td>\n",
              "      <td>165.0</td>\n",
              "      <td>159.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>158.0</td>\n",
              "      <td>136.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>155</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Closed autocracy</td>\n",
              "      <td>154.25</td>\n",
              "      <td>166.0</td>\n",
              "      <td>148.0</td>\n",
              "      <td>149.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>154.0</td>\n",
              "      <td>139.0</td>\n",
              "      <td>159.0</td>\n",
              "      <td>152.0</td>\n",
              "      <td>153.0</td>\n",
              "      <td>153.0</td>\n",
              "      <td>157.0</td>\n",
              "      <td>155.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>156</th>\n",
              "      <td>Central African Republic</td>\n",
              "      <td>CAF</td>\n",
              "      <td>Africa</td>\n",
              "      <td>Electoral autocracy</td>\n",
              "      <td>150.38</td>\n",
              "      <td>157.0</td>\n",
              "      <td>135.0</td>\n",
              "      <td>155.0</td>\n",
              "      <td>160.0</td>\n",
              "      <td>160.0</td>\n",
              "      <td>149.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>130.0</td>\n",
              "      <td>167.0</td>\n",
              "      <td>167.0</td>\n",
              "      <td>165.0</td>\n",
              "      <td>93.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>157</th>\n",
              "      <td>Yemen</td>\n",
              "      <td>YEM</td>\n",
              "      <td>Asia</td>\n",
              "      <td>Closed autocracy</td>\n",
              "      <td>156.88</td>\n",
              "      <td>165.0</td>\n",
              "      <td>159.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>157.0</td>\n",
              "      <td>165.0</td>\n",
              "      <td>160.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>164.0</td>\n",
              "      <td>148.0</td>\n",
              "      <td>136.0</td>\n",
              "      <td>155.0</td>\n",
              "      <td>152.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>158</th>\n",
              "      <td>South Sudan</td>\n",
              "      <td>SSD</td>\n",
              "      <td>Africa</td>\n",
              "      <td>Closed autocracy</td>\n",
              "      <td>157.62</td>\n",
              "      <td>167.0</td>\n",
              "      <td>158.0</td>\n",
              "      <td>164.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>153.0</td>\n",
              "      <td>160.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>164.0</td>\n",
              "      <td>125.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>159 rows × 17 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37bb55cf-dd42-48e5-a954-91b51be3d245')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-37bb55cf-dd42-48e5-a954-91b51be3d245 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-37bb55cf-dd42-48e5-a954-91b51be3d245');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-da945d9c-60c5-469a-9de9-7178ea2b82cc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-da945d9c-60c5-469a-9de9-7178ea2b82cc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-da945d9c-60c5-469a-9de9-7178ea2b82cc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c2a7528c-3f63-4493-aeb1-cf781ac23642\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('globalProsperity')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c2a7528c-3f63-4493-aeb1-cf781ac23642 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('globalProsperity');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "globalProsperity",
              "summary": "{\n  \"name\": \"globalProsperity\",\n  \"rows\": 159,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 159,\n        \"samples\": [\n          \"Colombia\",\n          \"Afghanistan\",\n          \"Burkina Faso\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 159,\n        \"samples\": [\n          \"COL\",\n          \"AFG\",\n          \"BFA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Europe\",\n          \"Oceania\",\n          \"Africa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"political_regime\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Electoral democracy\",\n          \"Closed autocracy\",\n          \"Liberal democracy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"average_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41.884771789584995,\n        \"min\": 6.0,\n        \"max\": 157.62,\n        \"num_unique_values\": 148,\n        \"samples\": [\n          130.12,\n          69.81,\n          150.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"safety_and_security\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.39493752971375,\n        \"min\": 1.0,\n        \"max\": 167.0,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          156.0,\n          166.0,\n          143.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"personal_freedom\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.92232779126725,\n        \"min\": 1.0,\n        \"max\": 167.0,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          82.0,\n          148.0,\n          65.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"governance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.55091539853955,\n        \"min\": 1.0,\n        \"max\": 167.0,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          88.0,\n          149.0,\n          94.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"social_capital\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.72624339755005,\n        \"min\": 1.0,\n        \"max\": 167.0,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          62.0,\n          166.0,\n          120.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"investment_environment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.31960443996427,\n        \"min\": 1.0,\n        \"max\": 167.0,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          61.0,\n          154.0,\n          134.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"enterprise_conditions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.48884797882735,\n        \"min\": 1.0,\n        \"max\": 167.0,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          93.0,\n          139.0,\n          126.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"infrastructure_and_market_access\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.20114573124743,\n        \"min\": 1.0,\n        \"max\": 167.0,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          70.0,\n          159.0,\n          152.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"economic_quality\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.02575570182764,\n        \"min\": 1.0,\n        \"max\": 167.0,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          85.0,\n          152.0,\n          125.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"living_conditions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.31055331230079,\n        \"min\": 1.0,\n        \"max\": 167.0,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          89.0,\n          153.0,\n          152.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"health\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47.981954652715004,\n        \"min\": 1.0,\n        \"max\": 167.0,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          36.0,\n          153.0,\n          132.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"education\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.09005149821393,\n        \"min\": 1.0,\n        \"max\": 167.0,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          80.0,\n          157.0,\n          161.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"natural_environment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.45117467620903,\n        \"min\": 1.0,\n        \"max\": 167.0,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          40.0,\n          155.0,\n          85.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Columnas\n",
        "\n",
        "print(\"Country Comparison columnas\")\n",
        "print(countryComparison.columns)\n",
        "\n",
        "print(\"\\nLife columnas\")\n",
        "print(life.columns)\n",
        "\n",
        "print(\"\\nGlobal Prosperity columnas\")\n",
        "print(globalProsperity.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rKmijC0Ncmeh",
        "outputId": "97c71caf-cae0-44f2-cc9a-f093b5bd6891"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Country Comparison columnas\n",
            "Index(['Country', 'Year', 'GDP (in Trillions USD)', 'GDP per Capita (in USD)',\n",
            "       'Inflation Rate (%)', 'Population (in Millions)',\n",
            "       'Population Growth Rate (%)', 'Urban Population (%)',\n",
            "       'Life Expectancy (Years)', 'Healthcare Expenditure per Capita (USD)',\n",
            "       'Doctor-to-Patient Ratio', 'Literacy Rate (%)',\n",
            "       'Education Expenditure as % of GDP', 'Internet Penetration (%)',\n",
            "       'Smartphone Adoption (%)', 'Energy Consumption (TWh)',\n",
            "       'Renewable Energy Share (%)', 'Military Expenditure (in Billion USD)',\n",
            "       'Number of Active Military Personnel',\n",
            "       'CO2 Emissions (Million Metric Tons)', 'Forest Coverage (%)',\n",
            "       'Number of Airports', 'Road Network Length (in km)',\n",
            "       'Public Transport Usage (%)', 'Human Development Index (HDI)',\n",
            "       'Gender Equality Index', 'Poverty Rate (%)',\n",
            "       'Number of International Visitors (in Millions)',\n",
            "       'Tourism Revenue (in Billion USD)', 'Agricultural Land (%)',\n",
            "       'Unemployment Rate (%)', 'Labor Force Participation Rate (%)',\n",
            "       'Crime Rate (per 100,000)', 'Corruption Perception Index',\n",
            "       'Freedom of Press Index', 'Voting Participation Rate (%)'],\n",
            "      dtype='object')\n",
            "\n",
            "Life columnas\n",
            "Index(['Unnamed: 0', 'Rank', 'Country', 'Stability(15%)', 'Rights(20%)',\n",
            "       'Health(15%)', 'Safety(10%)', 'Climate(15%)', 'Costs(15%)',\n",
            "       'Popularity(10%)', 'TotalQuality of life(100%)'],\n",
            "      dtype='object')\n",
            "\n",
            "Global Prosperity columnas\n",
            "Index(['country', 'code', 'region', 'political_regime', 'average_score',\n",
            "       'safety_and_security', 'personal_freedom', 'governance',\n",
            "       'social_capital', 'investment_environment', 'enterprise_conditions',\n",
            "       'infrastructure_and_market_access', 'economic_quality',\n",
            "       'living_conditions', 'health', 'education', 'natural_environment'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Para aumentar la cantidad de datos podemos unir estas 3 bases de datos bajo la columna de \"Country\" de esta forma uniremos nuestra base de datos principal planteada en la primer etapa del proyecto (country comparison) con la base de datos \"Índice de Prosperidad Global 2023 con políticas regionales\" donde vamos a usar su gran informacion sobre seguridad, calidad de vida, educacion, salud y entre otras variables importantes que contiene esta base de datos, ademas de unirla a la base de datos \"Quality of life in a country comparison\" donde se analiza la calidad de vida en un país, donde segun la dividicion que se hizo en esa base de datos entre cada una de sus variables tiene un porcentaje que si se sumaran todas daria 100 el cual es el 100% de calidad de vida. De acuerdo con Singh(2022) de la base de datos Quality of life in a country comparison estas divisiones mencionadas anteriormente estan puestas junto a la variable (en la columna).\n"
      ],
      "metadata": {
        "id": "TCNXm-3odapg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Cambiar la columna de paises a la misma para las 3\n",
        "\n",
        "globalProsperity.rename(columns={'country': 'Country'}, inplace=True)\n"
      ],
      "metadata": {
        "id": "Qxss4irNpAwL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Verificar si los paises estan escritos igual\n",
        "\n",
        "print(\"Países en countryComparison:\")\n",
        "print(sorted(countryComparison['Country'].unique()))\n",
        "\n",
        "print(\"\\nPaíses en globalProsperity:\")\n",
        "print(sorted(globalProsperity['Country'].unique()))\n",
        "\n",
        "print(\"\\nPaíses en life:\")\n",
        "print(sorted(life['Country'].unique()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GLYGKIlct3Yx",
        "outputId": "64314e04-2134-4893-fe05-b99c5ae39a84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Países en countryComparison:\n",
            "['Australia', 'Canada', 'China', 'India', 'Russia', 'USA']\n",
            "\n",
            "Países en globalProsperity:\n",
            "['Afghanistan', 'Albania', 'Algeria', 'Angola', 'Argentina', 'Armenia', 'Australia', 'Austria', 'Azerbaijan', 'Bahrain', 'Bangladesh', 'Belarus', 'Belgium', 'Benin', 'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Bulgaria', 'Burkina Faso', 'Burundi', 'Cambodia', 'Cameroon', 'Canada', 'Central African Republic', 'Chad', 'Chile', 'China', 'Colombia', 'Comoros', 'Congo', 'Costa Rica', 'Croatia', 'Cuba', 'Cyprus', 'Czechia', 'Denmark', 'Djibouti', 'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Eswatini', 'Ethiopia', 'Finland', 'France', 'Gabon', 'Georgia', 'Germany', 'Ghana', 'Greece', 'Guatemala', 'Guinea', 'Guyana', 'Haiti', 'Honduras', 'Hong Kong', 'Hungary', 'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jordan', 'Kazakhstan', 'Kenya', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Lithuania', 'Luxembourg', 'Madagascar', 'Malawi', 'Malaysia', 'Mali', 'Malta', 'Mauritania', 'Mauritius', 'Mexico', 'Moldova', 'Mongolia', 'Montenegro', 'Morocco', 'Mozambique', 'Myanmar', 'Namibia', 'Nepal', 'Netherlands', 'New Zealand', 'Nicaragua', 'Niger', 'Nigeria', 'North Macedonia', 'Norway', 'Oman', 'Pakistan', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Poland', 'Portugal', 'Qatar', 'Romania', 'Russia', 'Rwanda', 'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia', 'Slovenia', 'Somalia', 'South Africa', 'South Korea', 'South Sudan', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Sweden', 'Switzerland', 'Syria', 'Tajikistan', 'Tanzania', 'Thailand', 'Togo', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States', 'Uruguay', 'Uzbekistan', 'Venezuela', 'Vietnam', 'Yemen', 'Zambia', 'Zimbabwe']\n",
            "\n",
            "Países en life:\n",
            "['Afghanistan', 'Albania', 'Algeria', 'Angola', 'Argentina', 'Armenia', 'Australia', 'Austria', 'Azerbaijan', 'Bahrain', 'Bangladesh', 'Belarus', 'Belgium', 'Bermuda', 'Bolivia', 'Bosnia and Herzegovina', 'Brazil', 'Bulgaria', 'Burma', 'Burundi', 'Cambodia', 'Cameroon', 'Canada', 'Chad', 'Chile', 'China', 'Colombia', 'Congo (Dem. Republic)', 'Costa Rica', 'Croatia', 'Cyprus', 'Czechia', 'Denmark', 'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador', 'Estonia', 'Ethiopia', 'Finland', 'France', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Greece', 'Guatemala', 'Honduras', 'Hong Kong', 'Hungary', 'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Israel', 'Italy', 'Ivory Coast', 'Jamaica', 'Japan', 'Jordan', 'Kazakhstan', 'Kenya', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon', 'Lesotho', 'Lithuania', 'Luxembourg', 'Macao', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Malta', 'Mexico', 'Moldova', 'Mongolia', 'Montenegro', 'Morocco', 'Mozambique', 'Nepal', 'Netherlands', 'New Zealand', 'Nicaragua', 'Nigeria', 'North Macedonia', 'Norway', 'Oman', 'Pakistan', 'Paraguay', 'Peru', 'Philippines', 'Poland', 'Portugal', 'Qatar', 'Romania', 'Russia', 'Rwanda', 'Samoa', 'San Marino', 'Saudi Arabia', 'Senegal', 'Serbia', 'Sierra Leone', 'Singapore', 'Slovakia', 'Slovenia', 'South Africa', 'South Korea', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Sweden', 'Switzerland', 'Tajikistan', 'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States', 'Uruguay', 'Vietnam', 'Zambia', 'Zimbabwe']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Reescribir para que queden igual\n",
        "country_renames = {\n",
        "    \"USA\": \"United States\",\n",
        "}"
      ],
      "metadata": {
        "id": "pptbl4yXuxhw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Estandarizar nombres de países en cada DataFrame\n",
        "countryComparison['Country'] = countryComparison['Country'].replace(country_renames)\n",
        "life['Country'] = life['Country'].replace(country_renames)\n",
        "globalProsperity['Country'] = globalProsperity['Country'].replace(country_renames)\n"
      ],
      "metadata": {
        "id": "Lek9HBntvhhl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mezclar bases de datos\n",
        "countryMerged = countryComparison.merge(globalProsperity, on=\"Country\", how=\"inner\")\n",
        "countryMerged = countryMerged.merge(life, on=\"Country\", how=\"inner\")\n"
      ],
      "metadata": {
        "id": "GzEMLF59vjKC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mostrar base de datos combinada\n",
        "print(\"Base de datos combinada:\")\n",
        "countryMerged"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 548
        },
        "id": "5U8CYh8bwHjy",
        "outputId": "5e91598c-5ae0-430d-bd15-62c59128fb51"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Base de datos combinada:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Country  Year  GDP (in Trillions USD)  GDP per Capita (in USD)  \\\n",
              "0    United States  2000                   20.87                  65455.0   \n",
              "1           Russia  2000                    1.64                  10923.0   \n",
              "2           Canada  2000                    1.65                  47932.0   \n",
              "3            China  2000                   13.64                  10060.0   \n",
              "4            India  2000                    2.98                   2102.1   \n",
              "..             ...   ...                     ...                      ...   \n",
              "139         Russia  2023                    1.64                  10978.0   \n",
              "140         Canada  2023                    1.73                  44804.0   \n",
              "141          China  2023                   13.72                   9870.0   \n",
              "142          India  2023                    2.79                   2070.6   \n",
              "143      Australia  2023                    1.27                  51304.0   \n",
              "\n",
              "     Inflation Rate (%)  Population (in Millions)  Population Growth Rate (%)  \\\n",
              "0                  2.28                    330.34                        0.58   \n",
              "1                  3.25                    141.81                        0.10   \n",
              "2                  1.96                     36.63                        0.90   \n",
              "3                  2.43                   1446.93                        0.31   \n",
              "4                  4.87                   1313.76                        1.04   \n",
              "..                  ...                       ...                         ...   \n",
              "139                3.20                    138.04                        0.10   \n",
              "140                1.88                     35.59                        0.93   \n",
              "141                2.29                   1407.79                        0.29   \n",
              "142                4.70                   1411.74                        1.03   \n",
              "143                1.54                     24.38                        1.36   \n",
              "\n",
              "     Urban Population (%)  Life Expectancy (Years)  \\\n",
              "0                   83.42                    78.39   \n",
              "1                   72.67                    69.91   \n",
              "2                   79.54                    84.60   \n",
              "3                   58.56                    76.09   \n",
              "4                   34.09                    68.78   \n",
              "..                    ...                      ...   \n",
              "139                 71.56                    73.47   \n",
              "140                 83.11                    79.17   \n",
              "141                 61.86                    73.10   \n",
              "142                 34.05                    70.09   \n",
              "143                 84.37                    83.40   \n",
              "\n",
              "     Healthcare Expenditure per Capita (USD)  ...  Unnamed: 0  Rank  \\\n",
              "0                                   11209.00  ...          25    26   \n",
              "1                                     534.45  ...          94    95   \n",
              "2                                    5113.50  ...          13    14   \n",
              "3                                     459.00  ...          57    58   \n",
              "4                                      76.07  ...          77    78   \n",
              "..                                       ...  ...         ...   ...   \n",
              "139                                   539.70  ...          94    95   \n",
              "140                                  5139.75  ...          13    14   \n",
              "141                                   430.20  ...          57    58   \n",
              "142                                    76.07  ...          77    78   \n",
              "143                                  5434.00  ...           0     1   \n",
              "\n",
              "     Stability(15%)  Rights(20%)  Health(15%)  Safety(10%)  Climate(15%)  \\\n",
              "0                63           81           71           85            66   \n",
              "1                47           26           74           75            33   \n",
              "2                85           92           78           97            33   \n",
              "3                69           37           67           90            56   \n",
              "4                48           46           35           79            67   \n",
              "..              ...          ...          ...          ...           ...   \n",
              "139              47           26           74           75            33   \n",
              "140              85           92           78           97            33   \n",
              "141              69           37           67           90            56   \n",
              "142              48           46           35           79            67   \n",
              "143              86           92           87          100            90   \n",
              "\n",
              "     Costs(15%)  Popularity(10%)  TotalQuality of life(100%)  \n",
              "0            37               67                          67  \n",
              "1            62               42                          49  \n",
              "2            37               62                          69  \n",
              "3            38               57                          57  \n",
              "4            45               59                          52  \n",
              "..          ...              ...                         ...  \n",
              "139          62               42                          49  \n",
              "140          37               62                          69  \n",
              "141          38               57                          57  \n",
              "142          45               59                          52  \n",
              "143          23               41                          76  \n",
              "\n",
              "[144 rows x 62 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7fa40628-3b7d-43a1-b914-e44afe858de4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Year</th>\n",
              "      <th>GDP (in Trillions USD)</th>\n",
              "      <th>GDP per Capita (in USD)</th>\n",
              "      <th>Inflation Rate (%)</th>\n",
              "      <th>Population (in Millions)</th>\n",
              "      <th>Population Growth Rate (%)</th>\n",
              "      <th>Urban Population (%)</th>\n",
              "      <th>Life Expectancy (Years)</th>\n",
              "      <th>Healthcare Expenditure per Capita (USD)</th>\n",
              "      <th>...</th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Rank</th>\n",
              "      <th>Stability(15%)</th>\n",
              "      <th>Rights(20%)</th>\n",
              "      <th>Health(15%)</th>\n",
              "      <th>Safety(10%)</th>\n",
              "      <th>Climate(15%)</th>\n",
              "      <th>Costs(15%)</th>\n",
              "      <th>Popularity(10%)</th>\n",
              "      <th>TotalQuality of life(100%)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>United States</td>\n",
              "      <td>2000</td>\n",
              "      <td>20.87</td>\n",
              "      <td>65455.0</td>\n",
              "      <td>2.28</td>\n",
              "      <td>330.34</td>\n",
              "      <td>0.58</td>\n",
              "      <td>83.42</td>\n",
              "      <td>78.39</td>\n",
              "      <td>11209.00</td>\n",
              "      <td>...</td>\n",
              "      <td>25</td>\n",
              "      <td>26</td>\n",
              "      <td>63</td>\n",
              "      <td>81</td>\n",
              "      <td>71</td>\n",
              "      <td>85</td>\n",
              "      <td>66</td>\n",
              "      <td>37</td>\n",
              "      <td>67</td>\n",
              "      <td>67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Russia</td>\n",
              "      <td>2000</td>\n",
              "      <td>1.64</td>\n",
              "      <td>10923.0</td>\n",
              "      <td>3.25</td>\n",
              "      <td>141.81</td>\n",
              "      <td>0.10</td>\n",
              "      <td>72.67</td>\n",
              "      <td>69.91</td>\n",
              "      <td>534.45</td>\n",
              "      <td>...</td>\n",
              "      <td>94</td>\n",
              "      <td>95</td>\n",
              "      <td>47</td>\n",
              "      <td>26</td>\n",
              "      <td>74</td>\n",
              "      <td>75</td>\n",
              "      <td>33</td>\n",
              "      <td>62</td>\n",
              "      <td>42</td>\n",
              "      <td>49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Canada</td>\n",
              "      <td>2000</td>\n",
              "      <td>1.65</td>\n",
              "      <td>47932.0</td>\n",
              "      <td>1.96</td>\n",
              "      <td>36.63</td>\n",
              "      <td>0.90</td>\n",
              "      <td>79.54</td>\n",
              "      <td>84.60</td>\n",
              "      <td>5113.50</td>\n",
              "      <td>...</td>\n",
              "      <td>13</td>\n",
              "      <td>14</td>\n",
              "      <td>85</td>\n",
              "      <td>92</td>\n",
              "      <td>78</td>\n",
              "      <td>97</td>\n",
              "      <td>33</td>\n",
              "      <td>37</td>\n",
              "      <td>62</td>\n",
              "      <td>69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>China</td>\n",
              "      <td>2000</td>\n",
              "      <td>13.64</td>\n",
              "      <td>10060.0</td>\n",
              "      <td>2.43</td>\n",
              "      <td>1446.93</td>\n",
              "      <td>0.31</td>\n",
              "      <td>58.56</td>\n",
              "      <td>76.09</td>\n",
              "      <td>459.00</td>\n",
              "      <td>...</td>\n",
              "      <td>57</td>\n",
              "      <td>58</td>\n",
              "      <td>69</td>\n",
              "      <td>37</td>\n",
              "      <td>67</td>\n",
              "      <td>90</td>\n",
              "      <td>56</td>\n",
              "      <td>38</td>\n",
              "      <td>57</td>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>India</td>\n",
              "      <td>2000</td>\n",
              "      <td>2.98</td>\n",
              "      <td>2102.1</td>\n",
              "      <td>4.87</td>\n",
              "      <td>1313.76</td>\n",
              "      <td>1.04</td>\n",
              "      <td>34.09</td>\n",
              "      <td>68.78</td>\n",
              "      <td>76.07</td>\n",
              "      <td>...</td>\n",
              "      <td>77</td>\n",
              "      <td>78</td>\n",
              "      <td>48</td>\n",
              "      <td>46</td>\n",
              "      <td>35</td>\n",
              "      <td>79</td>\n",
              "      <td>67</td>\n",
              "      <td>45</td>\n",
              "      <td>59</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139</th>\n",
              "      <td>Russia</td>\n",
              "      <td>2023</td>\n",
              "      <td>1.64</td>\n",
              "      <td>10978.0</td>\n",
              "      <td>3.20</td>\n",
              "      <td>138.04</td>\n",
              "      <td>0.10</td>\n",
              "      <td>71.56</td>\n",
              "      <td>73.47</td>\n",
              "      <td>539.70</td>\n",
              "      <td>...</td>\n",
              "      <td>94</td>\n",
              "      <td>95</td>\n",
              "      <td>47</td>\n",
              "      <td>26</td>\n",
              "      <td>74</td>\n",
              "      <td>75</td>\n",
              "      <td>33</td>\n",
              "      <td>62</td>\n",
              "      <td>42</td>\n",
              "      <td>49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>Canada</td>\n",
              "      <td>2023</td>\n",
              "      <td>1.73</td>\n",
              "      <td>44804.0</td>\n",
              "      <td>1.88</td>\n",
              "      <td>35.59</td>\n",
              "      <td>0.93</td>\n",
              "      <td>83.11</td>\n",
              "      <td>79.17</td>\n",
              "      <td>5139.75</td>\n",
              "      <td>...</td>\n",
              "      <td>13</td>\n",
              "      <td>14</td>\n",
              "      <td>85</td>\n",
              "      <td>92</td>\n",
              "      <td>78</td>\n",
              "      <td>97</td>\n",
              "      <td>33</td>\n",
              "      <td>37</td>\n",
              "      <td>62</td>\n",
              "      <td>69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>China</td>\n",
              "      <td>2023</td>\n",
              "      <td>13.72</td>\n",
              "      <td>9870.0</td>\n",
              "      <td>2.29</td>\n",
              "      <td>1407.79</td>\n",
              "      <td>0.29</td>\n",
              "      <td>61.86</td>\n",
              "      <td>73.10</td>\n",
              "      <td>430.20</td>\n",
              "      <td>...</td>\n",
              "      <td>57</td>\n",
              "      <td>58</td>\n",
              "      <td>69</td>\n",
              "      <td>37</td>\n",
              "      <td>67</td>\n",
              "      <td>90</td>\n",
              "      <td>56</td>\n",
              "      <td>38</td>\n",
              "      <td>57</td>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>142</th>\n",
              "      <td>India</td>\n",
              "      <td>2023</td>\n",
              "      <td>2.79</td>\n",
              "      <td>2070.6</td>\n",
              "      <td>4.70</td>\n",
              "      <td>1411.74</td>\n",
              "      <td>1.03</td>\n",
              "      <td>34.05</td>\n",
              "      <td>70.09</td>\n",
              "      <td>76.07</td>\n",
              "      <td>...</td>\n",
              "      <td>77</td>\n",
              "      <td>78</td>\n",
              "      <td>48</td>\n",
              "      <td>46</td>\n",
              "      <td>35</td>\n",
              "      <td>79</td>\n",
              "      <td>67</td>\n",
              "      <td>45</td>\n",
              "      <td>59</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>143</th>\n",
              "      <td>Australia</td>\n",
              "      <td>2023</td>\n",
              "      <td>1.27</td>\n",
              "      <td>51304.0</td>\n",
              "      <td>1.54</td>\n",
              "      <td>24.38</td>\n",
              "      <td>1.36</td>\n",
              "      <td>84.37</td>\n",
              "      <td>83.40</td>\n",
              "      <td>5434.00</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>86</td>\n",
              "      <td>92</td>\n",
              "      <td>87</td>\n",
              "      <td>100</td>\n",
              "      <td>90</td>\n",
              "      <td>23</td>\n",
              "      <td>41</td>\n",
              "      <td>76</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>144 rows × 62 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7fa40628-3b7d-43a1-b914-e44afe858de4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7fa40628-3b7d-43a1-b914-e44afe858de4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7fa40628-3b7d-43a1-b914-e44afe858de4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1833fd63-186d-45e7-8c5e-76b3dc6b91a2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1833fd63-186d-45e7-8c5e-76b3dc6b91a2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1833fd63-186d-45e7-8c5e-76b3dc6b91a2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_413c43f5-8bbd-4fa0-9214-facff70c6605\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('countryMerged')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_413c43f5-8bbd-4fa0-9214-facff70c6605 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('countryMerged');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "countryMerged"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ver países sin repetición\n",
        "print(\"Países en countryMerged únicos:\")\n",
        "print(sorted(countryMerged['Country'].unique()))\n",
        "\n",
        "# Columnas\n",
        "print(\"\\nColumnas de Country Merged\")\n",
        "print (countryMerged.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eE28us9Z0oBa",
        "outputId": "82b9d547-af27-4a84-d7f9-90429284f076"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Países en countryMerged únicos:\n",
            "['Australia', 'Canada', 'China', 'India', 'Russia', 'United States']\n",
            "\n",
            "Columnas de Country Merged\n",
            "Index(['Country', 'Year', 'GDP (in Trillions USD)', 'GDP per Capita (in USD)',\n",
            "       'Inflation Rate (%)', 'Population (in Millions)',\n",
            "       'Population Growth Rate (%)', 'Urban Population (%)',\n",
            "       'Life Expectancy (Years)', 'Healthcare Expenditure per Capita (USD)',\n",
            "       'Doctor-to-Patient Ratio', 'Literacy Rate (%)',\n",
            "       'Education Expenditure as % of GDP', 'Internet Penetration (%)',\n",
            "       'Smartphone Adoption (%)', 'Energy Consumption (TWh)',\n",
            "       'Renewable Energy Share (%)', 'Military Expenditure (in Billion USD)',\n",
            "       'Number of Active Military Personnel',\n",
            "       'CO2 Emissions (Million Metric Tons)', 'Forest Coverage (%)',\n",
            "       'Number of Airports', 'Road Network Length (in km)',\n",
            "       'Public Transport Usage (%)', 'Human Development Index (HDI)',\n",
            "       'Gender Equality Index', 'Poverty Rate (%)',\n",
            "       'Number of International Visitors (in Millions)',\n",
            "       'Tourism Revenue (in Billion USD)', 'Agricultural Land (%)',\n",
            "       'Unemployment Rate (%)', 'Labor Force Participation Rate (%)',\n",
            "       'Crime Rate (per 100,000)', 'Corruption Perception Index',\n",
            "       'Freedom of Press Index', 'Voting Participation Rate (%)', 'code',\n",
            "       'region', 'political_regime', 'average_score', 'safety_and_security',\n",
            "       'personal_freedom', 'governance', 'social_capital',\n",
            "       'investment_environment', 'enterprise_conditions',\n",
            "       'infrastructure_and_market_access', 'economic_quality',\n",
            "       'living_conditions', 'health', 'education', 'natural_environment',\n",
            "       'Unnamed: 0', 'Rank', 'Stability(15%)', 'Rights(20%)', 'Health(15%)',\n",
            "       'Safety(10%)', 'Climate(15%)', 'Costs(15%)', 'Popularity(10%)',\n",
            "       'TotalQuality of life(100%)'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Eliminar columnas irrelevantes\n",
        "columns_to_drop = ['Unnamed: 0', 'Rank', 'average_score','code','Population Growth Rate (%)','Urban Population (%)']\n",
        "countryMerged = countryMerged.drop(columns=columns_to_drop)\n",
        "countryMerged = countryMerged.T.drop_duplicates().T  # Esto elimina columnas duplicadas\n",
        "\n",
        "# Imprmir columnas finales\n",
        "print(\"\\nColumnas de Country Merged\")\n",
        "print(countryMerged.columns)"
      ],
      "metadata": {
        "id": "G3yn3K4DIABd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "770fb05d-69e8-4fb0-fd7f-e8b8498287d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Columnas de Country Merged\n",
            "Index(['Country', 'Year', 'GDP (in Trillions USD)', 'GDP per Capita (in USD)',\n",
            "       'Inflation Rate (%)', 'Population (in Millions)',\n",
            "       'Life Expectancy (Years)', 'Healthcare Expenditure per Capita (USD)',\n",
            "       'Doctor-to-Patient Ratio', 'Literacy Rate (%)',\n",
            "       'Education Expenditure as % of GDP', 'Internet Penetration (%)',\n",
            "       'Smartphone Adoption (%)', 'Energy Consumption (TWh)',\n",
            "       'Renewable Energy Share (%)', 'Military Expenditure (in Billion USD)',\n",
            "       'Number of Active Military Personnel',\n",
            "       'CO2 Emissions (Million Metric Tons)', 'Forest Coverage (%)',\n",
            "       'Number of Airports', 'Road Network Length (in km)',\n",
            "       'Public Transport Usage (%)', 'Human Development Index (HDI)',\n",
            "       'Gender Equality Index', 'Poverty Rate (%)',\n",
            "       'Number of International Visitors (in Millions)',\n",
            "       'Tourism Revenue (in Billion USD)', 'Agricultural Land (%)',\n",
            "       'Unemployment Rate (%)', 'Labor Force Participation Rate (%)',\n",
            "       'Crime Rate (per 100,000)', 'Corruption Perception Index',\n",
            "       'Freedom of Press Index', 'Voting Participation Rate (%)', 'region',\n",
            "       'political_regime', 'safety_and_security', 'personal_freedom',\n",
            "       'governance', 'social_capital', 'investment_environment',\n",
            "       'enterprise_conditions', 'infrastructure_and_market_access',\n",
            "       'economic_quality', 'living_conditions', 'health', 'education',\n",
            "       'natural_environment', 'Stability(15%)', 'Rights(20%)', 'Health(15%)',\n",
            "       'Safety(10%)', 'Climate(15%)', 'Costs(15%)', 'Popularity(10%)',\n",
            "       'TotalQuality of life(100%)'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Podemos observar que nuestra base de datos ahora cuenta con muchas variables de las cuales podemos realizar muchas preguntas y responderlas relacionando nuestras variables."
      ],
      "metadata": {
        "id": "M0YkeKEECbHY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Punto 2: Lista de las preguntas que guían su análisis\n",
        "# Tres preguntas que comparen categorías y tres preguntas que realicen predicciones."
      ],
      "metadata": {
        "id": "hL5IfgfWI61f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Lista de preguntas**\n",
        "\n",
        "***Preguntas de Comparación entre Categorías:***\n",
        "\n",
        "¿Existen diferencias significativas en el PIB per cápita entre países con regímenes políticos distintos?\n",
        "\n",
        "¿La esperanza de vida varía entre regiones con distintos niveles de cobertura forestal?\n",
        "\n",
        "¿Hay diferencias en la tasa de alfabetización entre países con distinto acceso a infraestructura (medida en longitud de la red de carreteras o número de aeropuertos)?\n",
        "\n",
        "***Preguntas de Predicción:***\n",
        "\n",
        "¿Cómo afecta la combinación de gasto en salud per cápita y relación médico-paciente en la esperanza de vida?\n",
        "\n",
        "¿Qué impacto tiene la combinación de índice de igualdad de género y tasa de participación laboral en la tasa de pobreza?\n",
        "\n",
        "¿Es posible predecir la Tasa de Delincuencia en función de la Tasa de Desempleo y el Índice de Percepción de la Corrupción ?\n"
      ],
      "metadata": {
        "id": "1i3fUBg9UNG-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Punto 3: utilice la regresión lineal múltiple para ver si 2 o más variables pueden predecir otra variable\n",
        "# Describa tres preguntas que desea resolver de esta manera y,\n",
        "# Para cada una, las variables que considera utilizar para generar las predicciones y las variables que se busca predecir.\n"
      ],
      "metadata": {
        "id": "2-uVDx4NJDrW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Punto 4, implemente manualmente la regresion lineal y comparelo con una funcion especializada de python"
      ],
      "metadata": {
        "id": "yc2O594WtuYt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "¿Cómo afecta la combinación de gasto en salud per cápita y relación médico-paciente en la esperanza de vida?"
      ],
      "metadata": {
        "id": "n5kLc-v8Dpjk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# x1 -> Healthcare per capita\n",
        "# x2 -> Doctor to patient ratio\n",
        "squareSumX1= (countryMerged['Healthcare Expenditure per Capita (USD)'] ** 2).sum()\n",
        "squareSumX2= (countryMerged['Doctor-to-Patient Ratio'] **2).sum()\n",
        "\n",
        "sumX1_X2= (countryMerged['Healthcare Expenditure per Capita (USD)'] * countryMerged['Doctor-to-Patient Ratio']).sum()\n",
        "\n",
        "sumX1_Y= (countryMerged['Healthcare Expenditure per Capita (USD)'] * countryMerged['Life Expectancy (Years)']).sum()\n",
        "sumX2_Y= (countryMerged['Doctor-to-Patient Ratio'] * countryMerged['Life Expectancy (Years)']).sum()\n",
        "\n",
        "sumY=(countryMerged['Life Expectancy (Years)']).sum()\n",
        "\n",
        "sumX1=(countryMerged['Healthcare Expenditure per Capita (USD)']).sum()\n",
        "sumX1=(countryMerged['Healthcare Expenditure per Capita (USD)']).sum()\n",
        "sumX2=(countryMerged['Doctor-to-Patient Ratio']).sum()\n"
      ],
      "metadata": {
        "id": "FZE7hCbUWi7z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Matriz con valores calculados\n",
        "matrix=np.array([[144  , sumX1      , sumX2],\n",
        "                 [sumX1, squareSumX1, sumX1_X2],\n",
        "                 [sumX2, sumX1_X2   , squareSumX2]], dtype=float)\n",
        "\n",
        "# Inversa de la matriz\n",
        "matrix= sp.Matrix(matrix)\n",
        "matrixInversa= matrix.inv()\n",
        "\n",
        "# Escalar\n",
        "matrixInversa[:, 0] *=sumY\n",
        "matrixInversa[:, 1] *= sumX1_Y\n",
        "matrixInversa[:, 2] *= sumX2_Y"
      ],
      "metadata": {
        "id": "TBykNNXSVeCY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Coeficientes\n",
        "a1=float(sum(matrixInversa[0,:]))\n",
        "b1_1=float(sum(matrixInversa[1,:]))\n",
        "b2_1=float(sum(matrixInversa[2,:]))\n",
        "\n",
        "# Tipo numérico\n",
        "countryMerged[['Healthcare Expenditure per Capita (USD)', 'Doctor-to-Patient Ratio', 'Life Expectancy (Years)']] = \\\n",
        "countryMerged[['Healthcare Expenditure per Capita (USD)', 'Doctor-to-Patient Ratio', 'Life Expectancy (Years)']].apply(pd.to_numeric, errors='coerce')\n",
        "\n",
        "# Ecuacion de regresion lineal guardada en una nueva columna 'life expectancy manual'\n",
        "countryMerged['life expectancy manual'] = a1 + b1_1 * countryMerged['Healthcare Expenditure per Capita (USD)'] + b2_1 * countryMerged['Doctor-to-Patient Ratio']"
      ],
      "metadata": {
        "id": "nEcEhKY-CBgx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Error estandar de predicción:\n",
        "# Diferencia entre life expectancy y la prediccion\n",
        "countryMerged['e'] = countryMerged['Life Expectancy (Years)'] - countryMerged['life expectancy manual']\n",
        "\n",
        "# Scs, elevar al cuadrado e\n",
        "countryMerged['sce'] = countryMerged['e'].pow(2)\n",
        "\n",
        "# Sumatoria de los valores de e\n",
        "sumSCE=(countryMerged['sce']).sum()\n",
        "\n",
        "error_standar= math.sqrt(sumSCE/141)\n",
        "print(\"Error estandar de prediccion:\",error_standar)\n",
        "\n",
        "# Coeficiente de determinacion multiple:\n",
        "prom_Y=sumY/144\n",
        "countryMerged['scr'] = (countryMerged['life expectancy manual'] - prom_Y).pow(2)\n",
        "\n",
        "scr_sum=(countryMerged['scr']).sum()\n",
        "\n",
        "stc= sumSCE + scr_sum\n",
        "\n",
        "sqr_R= scr_sum / stc\n",
        "print(\"\\nCoeficiente de determinacion multiple:\",sqr_R)\n",
        "\n",
        "# Coeficiente ajustado de determinacion multiple\n",
        "sqr_R_Ajust= 1-sqr_R\n",
        "sqr_R_Ajust *= (144/141)\n",
        "sqr_R_Ajust= 1- sqr_R_Ajust\n",
        "print(\"\\nCoeficiente ajustado de determinacion multiple\",(sqr_R_Ajust))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ON1LmN5cx6Nn",
        "outputId": "ff0e4a3d-699a-44d1-f924-f281c85e5ff2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error estandar de prediccion: 4.091153929475658\n",
            "\n",
            "Coeficiente de determinacion multiple: 0.43648185684611696\n",
            "\n",
            "Coeficiente ajustado de determinacion multiple 0.4244921091194387\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Comparacion con funcion especializada de python\n",
        "\n",
        "X = countryMerged[['Healthcare Expenditure per Capita (USD)', 'Doctor-to-Patient Ratio']]\n",
        "y = countryMerged['Life Expectancy (Years)']\n",
        "\n",
        "X = sm.add_constant(X)\n",
        "\n",
        "modelo = sm.OLS(y, X).fit()\n",
        "\n",
        "countryMerged['Life Expectancy python'] = modelo.predict(X)\n",
        "\n",
        "print(countryMerged[['Country', 'life expectancy manual', 'Life Expectancy python']])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7NZULFBth5Yw",
        "outputId": "ef1358a4-4363-4b05-a16b-3e8e11aeb553"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "           Country  life expectancy manual  Life Expectancy python\n",
            "0    United States               82.629005               82.629005\n",
            "1           Russia               77.372997               77.372997\n",
            "2           Canada               78.682681               78.682681\n",
            "3            China               73.799778               73.799778\n",
            "4            India               71.920511               71.920511\n",
            "..             ...                     ...                     ...\n",
            "139         Russia               77.521369               77.521369\n",
            "140         Canada               78.604910               78.604910\n",
            "141          China               73.698954               73.698954\n",
            "142          India               72.033009               72.033009\n",
            "143      Australia               80.019373               80.019373\n",
            "\n",
            "[144 rows x 3 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "¿Qué impacto tiene la combinación de índice de igualdad de género y tasa de participación laboral en la tasa de pobreza?"
      ],
      "metadata": {
        "id": "-oSAicv8uBWH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# x1 = índice de igualdad de género\n",
        "# x2 = tasa de participación laboral\n",
        "#y= tasa de pobreza 'Poverty Rate (%)'\n",
        "\n",
        "squareSumX1= (countryMerged['Gender Equality Index'] ** 2).sum()\n",
        "squareSumX2= (countryMerged['Labor Force Participation Rate (%)'] **2).sum()\n",
        "\n",
        "sumX1_X2= (countryMerged['Gender Equality Index'] * countryMerged['Labor Force Participation Rate (%)']).sum()\n",
        "sumX1_Y= (countryMerged['Gender Equality Index'] * countryMerged['Poverty Rate (%)']).sum()\n",
        "sumX2_Y= (countryMerged['Labor Force Participation Rate (%)'] * countryMerged['Poverty Rate (%)']).sum()\n",
        "\n",
        "sumY=(countryMerged['Poverty Rate (%)']).sum()\n",
        "sumX1=(countryMerged['Gender Equality Index']).sum()\n",
        "sumX2=(countryMerged['Labor Force Participation Rate (%)']).sum()"
      ],
      "metadata": {
        "id": "GNEhI8GGuEFe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Matriz de Valores\n",
        "matrix=np.array([[144  , sumX1      , sumX2],\n",
        "                 [sumX1, squareSumX1, sumX1_X2],\n",
        "                 [sumX2, sumX1_X2   , squareSumX2]], dtype=float)\n",
        "\n",
        "# Inversa de la matriz\n",
        "matrix2= sp.Matrix(matrix)\n",
        "matrix2Inversa= matrix2.inv()\n",
        "\n",
        "matrix2Inversa[:, 0] *=sumY\n",
        "matrix2Inversa[:, 1] *= sumX1_Y\n",
        "matrix2Inversa[:, 2] *= sumX2_Y"
      ],
      "metadata": {
        "id": "KztAzQOmyCfi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Coeficientes\n",
        "a2=float(sum(matrix2Inversa[0,:]))\n",
        "b1_2=float(sum(matrix2Inversa[1,:]))\n",
        "b2_2=float(sum(matrix2Inversa[2,:]))\n",
        "\n",
        "countryMerged[['Gender Equality Index', 'Labor Force Participation Rate (%)', 'Poverty Rate (%)']] = \\\n",
        "countryMerged[['Gender Equality Index', 'Labor Force Participation Rate (%)', 'Poverty Rate (%)']].apply(pd.to_numeric, errors='coerce')\n",
        "\n",
        "# Ecuacion de regresion lineal guardada en una nueva columna 'life expectancy manual'\n",
        "countryMerged['Poverty Rate (%) manual'] = a2 + b1_2 * countryMerged['Gender Equality Index'] + b2_2 * countryMerged['Labor Force Participation Rate (%)']"
      ],
      "metadata": {
        "id": "MNWJ8BDqypIf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Error estandar de prediccion:\n",
        "\n",
        "# Diferencia entre life expectancy y la prediccion\n",
        "countryMerged['e'] = countryMerged['Poverty Rate (%)'] - countryMerged['Poverty Rate (%) manual']\n",
        "\n",
        "# Sce, elevar al cuadrado e\n",
        "countryMerged['sce'] = countryMerged['e'].pow(2)\n",
        "\n",
        "# Sumatoria de los valores de e\n",
        "sumSCE=(countryMerged['sce']).sum()\n",
        "\n",
        "error_standar= math.sqrt(sumSCE/141)\n",
        "print(\"Error estandar de prediccion:\",error_standar)\n",
        "\n",
        "# Coeficiente de determinacion multiple:\n",
        "prom_Y=sumY/144\n",
        "countryMerged['scr'] = (countryMerged['Poverty Rate (%) manual'] - prom_Y).pow(2)\n",
        "\n",
        "scr_sum=(countryMerged['scr']).sum()\n",
        "\n",
        "stc= sumSCE + scr_sum\n",
        "\n",
        "sqr_R= scr_sum / stc\n",
        "print(\"\\nCoeficiente de determinacion multiple:\",sqr_R)\n",
        "\n",
        "# Coeficiente ajustado de determinacion multiple\n",
        "sqr_R_Ajust= 1-sqr_R\n",
        "sqr_R_Ajust *= (144/141)\n",
        "sqr_R_Ajust= 1- sqr_R_Ajust\n",
        "\n",
        "print(\"\\nCoeficiente ajustado de determinacion multiple\",(sqr_R_Ajust))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eRVrPu5NzqhT",
        "outputId": "e377e8da-1f35-4035-c60a-115823168762"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error estandar de prediccion: 3.6205249858352038\n",
            "\n",
            "Coeficiente de determinacion multiple: 0.6268499072569467\n",
            "\n",
            "Coeficiente ajustado de determinacion multiple 0.6189105435815626\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Comparacion con funcion especializada de python\n",
        "X = countryMerged[['Gender Equality Index', 'Labor Force Participation Rate (%)']]\n",
        "y = countryMerged['Poverty Rate (%)']\n",
        "\n",
        "X = sm.add_constant(X)\n",
        "\n",
        "modelo = sm.OLS(y, X).fit()\n",
        "\n",
        "countryMerged['Poverty Rate python'] = modelo.predict(X)\n",
        "\n",
        "print(countryMerged[['Country', 'Poverty Rate (%) manual', 'Poverty Rate python']])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dP_vzmit5pjt",
        "outputId": "a1593b0d-9d0b-46a1-cb3e-79141de97472"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "           Country  Poverty Rate (%) manual  Poverty Rate python\n",
            "0    United States                 7.363828             7.363828\n",
            "1           Russia                13.088978            13.088978\n",
            "2           Canada                 7.834677             7.834677\n",
            "3            China                 8.810763             8.810763\n",
            "4            India                17.990993            17.990993\n",
            "..             ...                      ...                  ...\n",
            "139         Russia                11.983506            11.983506\n",
            "140         Canada                 8.739483             8.739483\n",
            "141          China                 5.664305             5.664305\n",
            "142          India                22.042844            22.042844\n",
            "143      Australia                 3.566326             3.566326\n",
            "\n",
            "[144 rows x 3 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "¿Es posible predecir la Tasa de Delincuencia en función de la Tasa de Desempleo y el Índice de Percepción de la Corrupción ?"
      ],
      "metadata": {
        "id": "uaoMfIiR5g8I"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "ggNKoZPK0-23"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# x1 = tasa de desempleo                        'Unemployment Rate (%)'\n",
        "# x2 =  Índice de Percepción de la Corrupción   'Corruption Perception Index'\n",
        "#y= tasa de delincuencia                        'Crime Rate (per 100,000)'\n",
        "squareSumX1= (countryMerged['Unemployment Rate (%)'] ** 2).sum()\n",
        "squareSumX2= (countryMerged['Corruption Perception Index'] **2).sum()\n",
        "\n",
        "sumX1_X2= (countryMerged['Unemployment Rate (%)'] * countryMerged['Corruption Perception Index']).sum()\n",
        "sumX1_Y= (countryMerged['Unemployment Rate (%)'] * countryMerged['Crime Rate (per 100,000)']).sum()\n",
        "sumX2_Y= (countryMerged['Corruption Perception Index'] * countryMerged['Crime Rate (per 100,000)']).sum()\n",
        "\n",
        "sumY=(countryMerged['Crime Rate (per 100,000)']).sum()\n",
        "sumX1=(countryMerged['Unemployment Rate (%)']).sum()\n",
        "sumX2=(countryMerged['Corruption Perception Index']).sum()"
      ],
      "metadata": {
        "id": "5aML-vBZ6wm_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Matriz de valores calculados\n",
        "matrix=np.array([[144  , sumX1      , sumX2],\n",
        "                 [sumX1, squareSumX1, sumX1_X2],\n",
        "                 [sumX2, sumX1_X2   , squareSumX2]], dtype=float)\n",
        "\n",
        "# Inversa de la matriz\n",
        "matrix= sp.Matrix(matrix)\n",
        "matrix3Inversa= matrix.inv()\n",
        "\n",
        "matrix3Inversa[:, 0] *=sumY\n",
        "matrix3Inversa[:, 1] *= sumX1_Y\n",
        "matrix3Inversa[:, 2] *= sumX2_Y"
      ],
      "metadata": {
        "id": "5K-li1gS7yto"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Coeficientes\n",
        "a3=float(sum(matrix3Inversa[0,:]))\n",
        "b1_3=float(sum(matrix3Inversa[1,:]))\n",
        "b2_3=float(sum(matrix3Inversa[2,:]))\n",
        "\n",
        "countryMerged[['Unemployment Rate (%)', 'Corruption Perception Index', 'Crime Rate (per 100,000)']] = \\\n",
        "countryMerged[['Unemployment Rate (%)', 'Corruption Perception Index', 'Crime Rate (per 100,000)']].apply(pd.to_numeric, errors='coerce')\n",
        "\n",
        "# Ecuacion de regresion lineal guardada en una nueva columna 'life expectancy manual'\n",
        "countryMerged['Crime Rate manual'] = a3 + b1_3 * countryMerged['Unemployment Rate (%)'] + b2_3 * countryMerged['Corruption Perception Index']"
      ],
      "metadata": {
        "id": "96Cauc6y75zM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Error estandar de prediccion:\n",
        "\n",
        "#diferencia entre life expectancy y la prediccion\n",
        "countryMerged['e'] = countryMerged['Crime Rate (per 100,000)'] - countryMerged['Crime Rate manual']\n",
        "\n",
        "#sce, elevar al cuadrado e\n",
        "countryMerged['sce'] = countryMerged['e'].pow(2)\n",
        "\n",
        "#sumatoria de los valores de e\n",
        "sumSCE=(countryMerged['sce']).sum()\n",
        "\n",
        "error_standar= math.sqrt(sumSCE/141)\n",
        "print(\"Error estandar de prediccion:\",error_standar)\n",
        "\n",
        "#coeficiente de determinacion multiple:\n",
        "prom_Y=sumY/144\n",
        "countryMerged['scr'] = (countryMerged['Crime Rate manual'] - prom_Y).pow(2)\n",
        "\n",
        "scr_sum=(countryMerged['scr']).sum()\n",
        "\n",
        "stc= sumSCE + scr_sum\n",
        "\n",
        "sqr_R= scr_sum / stc\n",
        "print(\"\\nCoeficiente de determinacion multiple:\",sqr_R)\n",
        "\n",
        "#Coeficiente ajustado de determinacion multiple\n",
        "sqr_R_Ajust= 1-sqr_R\n",
        "sqr_R_Ajust *= (144/141)\n",
        "sqr_R_Ajust= 1- sqr_R_Ajust\n",
        "print(\"\\nCoeficiente ajustado de determinacion multiple\",(sqr_R_Ajust))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zAatZWuF8V38",
        "outputId": "71999242-dd35-41b7-a8dc-1662d2457f8e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error estandar de prediccion: 218.77163069078105\n",
            "\n",
            "Coeficiente de determinacion multiple: 0.44788267384987096\n",
            "\n",
            "Coeficiente ajustado de determinacion multiple 0.43613549669774054\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Comparacion con funcion especializada de python\n",
        "X = countryMerged[['Unemployment Rate (%)', 'Corruption Perception Index']]\n",
        "y = countryMerged['Crime Rate (per 100,000)']\n",
        "\n",
        "X = sm.add_constant(X)\n",
        "\n",
        "modelo = sm.OLS(y, X).fit()\n",
        "\n",
        "countryMerged['Crime Rate python'] = modelo.predict(X)\n",
        "\n",
        "print(countryMerged[['Country', 'Crime Rate manual', 'Crime Rate python']])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XQM6wUCY86sr",
        "outputId": "ee1f57b8-ac04-4aea-cc2c-b275357ce988"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "           Country  Crime Rate manual  Crime Rate python\n",
            "0    United States         523.420647         523.420647\n",
            "1           Russia         206.692703         206.692703\n",
            "2           Canada         698.909849         698.909849\n",
            "3            China         267.247426         267.247426\n",
            "4            India         444.254791         444.254791\n",
            "..             ...                ...                ...\n",
            "139         Russia         211.125151         211.125151\n",
            "140         Canada         675.142159         675.142159\n",
            "141          China         276.983753         276.983753\n",
            "142          India         448.964426         448.964426\n",
            "143      Australia         674.719933         674.719933\n",
            "\n",
            "[144 rows x 3 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Punto 5: Para cada una de las regresiones lineales realizadas, identifique el coeficiente que\n",
        "# es mayor (sin considerar la constante). Para efectos de ilustración, realice gráficas\n",
        "# de dispersión con la variable predictora con el mayor coeficiente en el eje “x” y la\n",
        "# variable a predecir en el eje “y”"
      ],
      "metadata": {
        "id": "0gdhnl-oFFt9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Para realizar esto debemos identificar el mayor coeficiente nuestro modelo (sin considerar la constante). Para esto podemos ver que ya obtuvimos lo que ocupamos en el punto anterior y es que por cada regresion calculamos un a,b1 y b2 los cuales son el intercepto y las b son los coeficientes respectivos de las variables entonces vamos a usar estos coeficientes (b1,b2) que evalúan el impacto individual de cada predictor"
      ],
      "metadata": {
        "id": "tDuGT6UYKtKz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Datos de ejemplo (reemplazar con tus variables reales)\n",
        "regresiones = [\n",
        "    {\"constante\": a1, \"b1\": b1_1, \"b2\": b2_1, \"variables\": ['Healthcare Expenditure per Capita (USD)', 'Doctor-to-Patient Ratio'], \"dependiente\": 'Life Expectancy (Years)'},\n",
        "    {\"constante\": a2, \"b1\": b1_2, \"b2\": b2_2, \"variables\": ['Gender Equality Index', 'Labor Force Participation Rate (%)'], \"dependiente\": 'Poverty Rate (%)'},\n",
        "    {\"constante\": a3, \"b1\": b1_3, \"b2\": b2_3, \"variables\": ['Unemployment Rate (%)', 'Corruption Perception Index'], \"dependiente\": 'Crime Rate (per 100,000)'}\n",
        "]\n",
        "\n",
        "\n",
        "for i, reg in enumerate(regresiones, start=1):\n",
        "    # Identificar el coeficiente mayor\n",
        "    coeficientes = {\"b1\": reg[\"b1\"], \"b2\": reg[\"b2\"]}\n",
        "    max_var = max(coeficientes, key=coeficientes.get)\n",
        "    max_coef = coeficientes[max_var]\n",
        "    variable_pred = reg[\"variables\"][int(max_var[-1]) - 1]  # Seleccionar la variable asociada\n",
        "\n",
        "    print(f\"Regresión {i}: Coeficiente mayor = {max_coef:.4f}, Variable asociada = {variable_pred}\")\n",
        "\n",
        "    # Obtener datos de la variable dependiente y predictora\n",
        "    variable_dependiente = countryMerged[reg[\"dependiente\"]]\n",
        "    variable_predictora = countryMerged[variable_pred]\n",
        "\n",
        "    # Ajustar una regresión lineal simple\n",
        "    X = variable_predictora.values.reshape(-1, 1)\n",
        "    Y = variable_dependiente.values.reshape(-1, 1)\n",
        "    model = LinearRegression()\n",
        "    model.fit(X, Y)\n",
        "    y_pred = model.predict(X)\n",
        "\n",
        "    # Obtener la ecuación de la recta\n",
        "    pendiente = model.coef_[0][0]\n",
        "    intercepto = model.intercept_[0]\n",
        "    print(f\"Ecuación de la recta: y = {pendiente:.4f}x + {intercepto:.4f}\")\n",
        "\n",
        "    # Graficar\n",
        "    plt.figure()\n",
        "    plt.scatter(variable_predictora, variable_dependiente, color='blue', label='Datos reales')\n",
        "    plt.plot(variable_predictora, y_pred, color='red', label=f'Recta: y={pendiente:.2f}x+{intercepto:.2f}')\n",
        "    plt.title(f'Regresión {i}: {variable_pred} vs {reg[\"dependiente\"]}')\n",
        "    plt.xlabel(variable_pred)\n",
        "    plt.ylabel(reg[\"dependiente\"])\n",
        "    plt.legend()\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "YX74gl_DqPbJ",
        "outputId": "ab958984-f1de-4096-8b77-ed52434b23b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Regresión 1: Coeficiente mayor = 1.6071, Variable asociada = Doctor-to-Patient Ratio\n",
            "Ecuación de la recta: y = 2.2836x + 71.3901\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Regresión 2: Coeficiente mayor = 11.1048, Variable asociada = Gender Equality Index\n",
            "Ecuación de la recta: y = -22.9713x + 30.4704\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Regresión 3: Coeficiente mayor = 53.3667, Variable asociada = Unemployment Rate (%)\n",
            "Ecuación de la recta: y = 35.5237x + 298.0063\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Analizando la primer regresion podemos concluir que hay una tendencia ascendente viendo  a medida que aumenta el Doctor-to-Patient Ratio, también aumenta la esperanza de vida y de acuerdo con el modelo este predice un incremento promedio de 2.2836 años en la esperanza de vida(viendo la ecuacion de la recta)\n",
        "Sin embargo, los puntos están dispersos, lo que indica que otros factores también podrían influir en la esperanza de vida y que el modelo no es tan bueno, tiene buena predicciones por intervalos, pero hay otros intervalos donde los puntos son menos y mas disperson entonces la prediccion en esos rangos no es ideal.\n",
        "\n",
        "Respecto a la segunda regresion lineal se puede observar que los puntos muestran una tendencia descendente donde a medida que el índice de igualdad de género aumenta (mejor igualdad), la tasa de pobreza tiende a disminuir. Sin embargo, hay cierta dispersión, especialmente para valores altos del índice de igualdad de género. Analizando la ecuacion de l recta podemos ver que al ser negativa -22.9713 indica que a medida que mejora la igualdad de género, la tasa de pobreza tiende a disminuir en 22.97%. Viendo la dispersion de ciertas zonas podriamos concluir que el modelo por zonas es acertado, pero para valores más bajos del índice de igualdad de género (entre 0.6 y 0.8), la dispersión es menor, lo que indica un ajuste más confiable del modelo en esa región, pero en las zonas altas podemos observar una gran dispersion entonces se podria decir que la igualdad de genero si disminuye la pobreza, pero hay otros factores que se deben tomar en juego que cbajen el indice de pobreza. El modelo es bueno ,pero la relación no es completamente explicada debido a la dispersión de los datos.\n",
        "\n",
        "Para la tercer regresion podemos observar que existe una tendencia ascendente donde a medida que aumenta el desempleo, la tasa de criminalidad también tiende a aumentar.\n",
        "Los puntos tienen una clara dispersión, pero la tendencia general es positiva. La ecuacion de la recta nos dice que según el modelo, por cada 1% de aumento en la tasa de desempleo, se espera un incremento promedio de 35.5237 crímenes por cada 100,000 habitantes. Analizando los puntos podemos ver que los puntos muestran una tendencia ascendente, pero especialmente en los valores bajos de desempleo  (entre 4% y 6%) hay una mayor dispersion lo que indica que el modelo no captura toda la variabilidad de los datos. El modelo no es el ideal solo en cierta parte acierta con la relacion y como algunos puntos se alejan mucho de la línea roja, se puede decir que hay otros factores importantes no considerados en el modelo que tambien afectarian el aumento de la criminalidad, aunque el modelo lineal proporciona una visión general."
      ],
      "metadata": {
        "id": "1y0kuzB-PaPV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Punto 6: Para cada uno de los modelos de regresión lineal del punto 4 (cada combinación de variables),\n",
        "# “invente” valores para las variables predictoras, de manera a generar predicciones para posibles datos nuevos."
      ],
      "metadata": {
        "id": "cK-vJbivWkyI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Ciclo de datos\n",
        "for i, modelo in enumerate(regresiones, 1):\n",
        "    print(f\"Modelo {i}:\")\n",
        "    print(f\"  Variable dependiente: {modelo['dependiente']}\")\n",
        "    print(f\"  Constante (a): {modelo['constante']:.4f}\")\n",
        "    print(f\"  Coeficiente b1 (para {modelo['variables'][0]}): {modelo['b1']:.4f}\")\n",
        "    print(f\"  Coeficiente b2 (para {modelo['variables'][1]}): {modelo['b2']:.4f}\")\n",
        "    print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2cmdTzEgXFax",
        "outputId": "f7dd0ce6-663c-4188-e35f-968fe304a362"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Modelo 1:\n",
            "  Variable dependiente: Life Expectancy (Years)\n",
            "  Constante (a): 70.4843\n",
            "  Coeficiente b1 (para Healthcare Expenditure per Capita (USD)): 0.0007\n",
            "  Coeficiente b2 (para Doctor-to-Patient Ratio): 1.6071\n",
            "\n",
            "Modelo 2:\n",
            "  Variable dependiente: Poverty Rate (%)\n",
            "  Constante (a): 63.9906\n",
            "  Coeficiente b1 (para Gender Equality Index): 11.1048\n",
            "  Coeficiente b2 (para Labor Force Participation Rate (%)): -1.0236\n",
            "\n",
            "Modelo 3:\n",
            "  Variable dependiente: Crime Rate (per 100,000)\n",
            "  Constante (a): -357.2354\n",
            "  Coeficiente b1 (para Unemployment Rate (%)): 53.3667\n",
            "  Coeficiente b2 (para Corruption Perception Index): 10.2537\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Coeficientes de los modelos obtenidos en el punto 4\n",
        "modelos = [\n",
        "    {\n",
        "        \"dependiente\": \"Esperanza de vida (Años)\",\n",
        "        \"a\": 70.4843,\n",
        "        \"b1\": 0.0007,\n",
        "        \"b2\": 1.6071,\n",
        "        \"variables\": [\"Gasto en Salud per Cápita (USD)\", \"Relación médico-paciente\"]\n",
        "    },\n",
        "    {\n",
        "        \"dependiente\": \"Tasa de pobreza (%)\",\n",
        "        \"a\": 63.9906,\n",
        "        \"b1\": 11.1048,\n",
        "        \"b2\": -1.0236,\n",
        "        \"variables\": [\"Índice de Igualdad de Género\", \"Tasa de Participación en la Fuerza Laboral (%)\"]\n",
        "    },\n",
        "    {\n",
        "        \"dependiente\": \"Tasa de criminalidad (por 100,000)\",\n",
        "        \"a\": -357.2354,\n",
        "        \"b1\": 53.3667,\n",
        "        \"b2\": 10.2537,\n",
        "        \"variables\": [\"Tasa de Desempleo (%)\", \"Índice de Percepción de la Corrupción\"]\n",
        "    }\n",
        "]\n",
        "\n",
        "# Valores inventados para las variables predictoras\n",
        "valores_predictores = [\n",
        "    [(5000, 2.5), (7000, 3.0), (9000, 3.5)],  # Modelo 1\n",
        "    [(0.3, 70), (0.4, 60), (0.5, 50)],        # Modelo 2\n",
        "    [(5, 50), (7, 60), (10, 70)]             # Modelo 3\n",
        "]\n",
        "\n",
        "# Generar predicciones\n",
        "for i, modelo in enumerate(modelos, start=1):\n",
        "    print(f\"\\nModelo {i}: Variable dependiente: {modelo['dependiente']}\")\n",
        "    print(f\"Variables predictoras: {modelo['variables']}\")\n",
        "    for j, (x1, x2) in enumerate(valores_predictores[i-1], start=1):\n",
        "        # Cálculo de la predicción\n",
        "        prediccion = modelo[\"a\"] + modelo[\"b1\"] * x1 + modelo[\"b2\"] * x2\n",
        "        print(f\"Predicción {j}: {modelo['dependiente']} = {prediccion:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cu9uedNfguZK",
        "outputId": "da10f03c-3770-4b9e-aef1-6676a2d62db3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Modelo 1: Variable dependiente: Esperanza de vida (Años)\n",
            "Variables predictoras: ['Gasto en Salud per Cápita (USD)', 'Relación médico-paciente']\n",
            "Predicción 1: Esperanza de vida (Años) = 78.00\n",
            "Predicción 2: Esperanza de vida (Años) = 80.21\n",
            "Predicción 3: Esperanza de vida (Años) = 82.41\n",
            "\n",
            "Modelo 2: Variable dependiente: Tasa de pobreza (%)\n",
            "Variables predictoras: ['Índice de Igualdad de Género', 'Tasa de Participación en la Fuerza Laboral (%)']\n",
            "Predicción 1: Tasa de pobreza (%) = -4.33\n",
            "Predicción 2: Tasa de pobreza (%) = 7.02\n",
            "Predicción 3: Tasa de pobreza (%) = 18.36\n",
            "\n",
            "Modelo 3: Variable dependiente: Tasa de criminalidad (por 100,000)\n",
            "Variables predictoras: ['Tasa de Desempleo (%)', 'Índice de Percepción de la Corrupción']\n",
            "Predicción 1: Tasa de criminalidad (por 100,000) = 422.28\n",
            "Predicción 2: Tasa de criminalidad (por 100,000) = 631.55\n",
            "Predicción 3: Tasa de criminalidad (por 100,000) = 894.19\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Modelo 1: Esperanza de vida (Años)**\n",
        "\n",
        "Valores inventados:\n",
        "\n",
        "\n",
        "*   5000, 7000, y 9000 representan la inversión en salud.\n",
        "*   2.5, 3.0, y 3.5 reflejan relaciones médico-paciente.\n",
        "\n",
        "Resultados de esperanza de la vida:\n",
        "\n",
        "78.00 años: En un país con un gasto moderado y una relación médico-paciente promedio.\n",
        "80.21 años: En un país con mayor inversión en salud y mejor acceso médico.\n",
        "82.41 años: En un país con gasto alto en salud y acceso médico excelente.\n",
        "\n",
        "En sintesis la esperanza de vida aumenta con mayor gasto en salud y mejor relación médico-paciente.\n",
        "\n",
        "**Modelo 2: Tasa de pobreza (%)**\n",
        "\n",
        "Valores inventados:\n",
        "\n",
        "* 0.3, 0.4, y 0.5 valores de indice de igualdad, donde 0 representa desigualdad total y 1 representa igualdad total.\n",
        "* 70%, 60%, y 50% corresponden a niveles de participación laboral.\n",
        "\n",
        "Resultados de tasa de pobreza:\n",
        "\n",
        "-4.33%: En un país con igualdad de género alta y alta participación laboral.(no hay pobreza casi)\n",
        "7.02%: En un país con igualdad de género moderada y participación laboral media.\n",
        "18.36%: En un país con desigualdad de género significativa y baja participación laboral. (mayor pobreza)\n",
        "\n",
        "Sintesis: La tasa de pobreza se reduce con mayor igualdad de género y participación laboral.\n",
        "\n",
        "**Modelo 3: Tasa de criminalidad (por 100,000)**\n",
        "\n",
        "valores inventados:\n",
        "\n",
        "* 5%, 7%, y 10% de desempleo.\n",
        "* 50, 60, y 70 representan niveles de corrupción.\n",
        "\n",
        "Resultados de la tasa de crimen:\n",
        "\n",
        "422.28: En un país con desempleo bajo y corrupción moderada.\n",
        "631.55: En un país con desempleo medio y corrupción alta.\n",
        "894.19: En un país con desempleo alto y corrupción elevada.\n",
        "\n",
        "La tasa de criminalidad aumenta con mayores niveles de desempleo y corrupción."
      ],
      "metadata": {
        "id": "3ad2U37MsAb_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Punto 7: A partir de las predicciones anteriores, responda a las preguntas: ¿cuáles son losalcances o posibles ventajas de realizar este\n",
        "# Tipo de predicciones? ¿De qué manera las predicciones están limitadas? Compare este tipo de modelos de regresión\n",
        "# Lineal con los modelos grandes de lenguaje, que predicen la siguiente palabra a\n",
        "# Partir de un texto. ¿Qué tienen en común? ¿Qué diferencias tienen?"
      ],
      "metadata": {
        "id": "wUxxpeZavzkv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Las ventajas de realizar predicciones mediante una regresion lineal multiple o simple, de acuerdo con Gonzalez (2019) es que son simples y rapidos de entender, explicar o realizar. Mediante estas predicciones hemos observado que podemos identificar tendencias y con esto realizar estimaciones (predicciones), entonces podemos plantear distintos analisis y en cualquier area.\n",
        "\n",
        "De acuerdo con Amazon Web Services ([AWS],s.f) entre las limitaciones que tienen las prediccciones es que no tienen un número infinito de resultados y además de requieren que los datos sean los suficientes para que los modelos sean precisos en las predicciones y tiene una precisión limitada. Esto lo pudimos observar en el trascurso de la creacion de las 3 regresiones lineales, donde al ver que si alguna variables no tenia suficientes datos o si intervenia otra variable entoinces el modelo no seria ideal. Tambien vimos que las predicciones pueden no ser del todo acertadas cuando a una variable otras variables o factores tambien la afectan no solo una. Lo cual podriamos sintetizar en que las relaciones no siempre son lineales y esto afectaria al modelo.\n",
        "\n",
        "Los modelos grandes de lenguaje segun Betania(2024) son modelos que usan IA capaces de entender lo que les dice un humano y responderles, estos tienen una estructura muy compleja a base de redes neuronales, los cuales fueron entrenados con una inmensa cantidad de datos.\n",
        "\n",
        "Entonces en las **similitudes** con el modelo de regresion lineal es que ambos reciben datos y toman decisiones mediante a estos datos. Pueden predecir resultados basados en patrones generalizando patrones. Mientras que en sus **diferencias** es que de acuerdo con AWS(s.f) la regresion lineal utiliza la modelización matemática es decir ocupa numeros, mientras que los modelos grandes de lenguaje trabajan con datos textuales, procesando secuencias de palabras o caracteres. Otra diferencia es en su uso, ya que el modelo de regresion se utiliza en análisis cuantitativo para predecir valores numéricos mientras que los modelos grandes de lenguaje se usan para la traducción de palabras y la generación de texto. Cabe resaltar que las regresiones lineales son mas simples y rapidas de entender y hacerlas, lo cual es lo contrario a los modelos de lenguaje."
      ],
      "metadata": {
        "id": "zNk5tv0exO9w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Punto 8:\n",
        "# ¿Existen diferencias significativas en la expectativa de vida entre países con\n",
        "# regimen liberal democrata y electoral autocrata?"
      ],
      "metadata": {
        "id": "x6sSxMtX9zUl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import scipy.stats as stats\n",
        "\n",
        "# Eliminar duplicados\n",
        "liberal_democracy = countryMerged[countryMerged['political_regime'] == 'Liberal democracy'].dropna()\n",
        "Electoral_autocracy = countryMerged[countryMerged['political_regime'] == 'Electoral autocracy'].dropna()\n",
        "x = liberal_democracy['Life Expectancy (Years)'].dropna()\n",
        "y = Electoral_autocracy['Life Expectancy (Years)'].dropna()\n",
        "\n",
        "# Tamaño muestras\n",
        "n1=len(x)\n",
        "n2=len(y)\n",
        "mu= y.mean() # Media\n",
        "dof = min(n1,n2) - 1 #Grados de libertad para el t-test\n",
        "\n",
        "# t-test\n",
        "t_stat, p_val = stats.ttest_ind(x, y)\n",
        "\n",
        "# Resultados\n",
        "print(\"t-statistic = \" + str(t_stat))\n",
        "print(\"p-value = \" + str(p_val))"
      ],
      "metadata": {
        "id": "RWEtV37MC4yE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dbff68c4-1f01-4979-aace-964a1947b434"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "t-statistic = 19.3479594709401\n",
            "p-value = 2.0924573149755112e-38\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Con estos resultados podemos observar que las diferencia entre la expectativa de vida entre distintos regimenes politicos es significativa, vemos que la media de los paises con un regimen liberal democrata es mayor que los paises con un regimen electoral autocrata, por lo que podemos rechazar la hipotesis dado que si hay una diferencia entre estos dos grupos comparados."
      ],
      "metadata": {
        "id": "wGNbHrg4HwdH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# ¿La esperanza de vida varía entre regiones con niveles de cobertura\n",
        "# forestal mayor o menor de la media?"
      ],
      "metadata": {
        "id": "r_9zQjY1_Ab0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Promedio/Media\n",
        "mediaCobertura = countryMerged['Forest Coverage (%)'].mean()\n",
        "print(\"Media de cobertura forestal:\", mediaCobertura)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h52ICI-DARUz",
        "outputId": "eb5903a0-fdef-4854-e1d3-a65dda2c6d7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Media de cobertura forestal: 30.29131944444445\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Forest Coverage (%)\n",
        "# Dividir datos\n",
        "belowAvrg = countryMerged[countryMerged['Forest Coverage (%)'] <= mediaCobertura].dropna()\n",
        "AboveAvrg = countryMerged[countryMerged['Forest Coverage (%)'] > mediaCobertura].dropna()\n",
        "\n",
        "# Eliminar duplicados\n",
        "x = AboveAvrg['Life Expectancy (Years)'].dropna()\n",
        "y = belowAvrg['Life Expectancy (Years)'].dropna()\n",
        "\n",
        "# Grados de libertad y media\n",
        "n1=len(x)\n",
        "n2=len(y)\n",
        "mu= y.mean()\n",
        "dof = min(n1,n2) - 1\n",
        "\n",
        "# T test\n",
        "t_stat, p_val = stats.ttest_ind(x, y)\n",
        "\n",
        "# Resultados\n",
        "print(\"t-statistic = \" + str(t_stat))\n",
        "print(\"p-value = \" + str(p_val))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-lDQPlwJ_ELU",
        "outputId": "995e1920-13ad-42ba-c6f0-9436aa42dc79"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "t-statistic = 2.1618172761482497\n",
            "p-value = 0.03230803734513035\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dados estos resultados podemos ver que la diferencia entre estos dos grupos es significativa, dado que el valor p es menor que 0.05 concluimos esto, por lo que podemos decir que en los paises con mayor cobertura forestal hay entoncces mayor esperanza de vida que en los que tienen menor cobertura."
      ],
      "metadata": {
        "id": "SJDGz52pJOmZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# ¿Hay diferencias en la tasa de alfabetización entre países con acceso a\n",
        "# Infraestructura (medida en longitud de la red de carreteras o número de aeropuertos)\n",
        "# Mayor o menor a la media?"
      ],
      "metadata": {
        "id": "bjkQMc8HD8BD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Infrastructure_and_market_access'\n",
        "\n",
        "#Media\n",
        "avrgInfraestructure =countryMerged['infrastructure_and_market_access'].mean()\n",
        "print(\"Media de acceso a la infraestructura: \", avrgInfraestructure)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eMqjhjV7D_WV",
        "outputId": "101444a7-8a95-4f32-f534-a9922f347517"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Media de acceso a la infraestructura:  39.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Pasar a numérico\n",
        "countryMerged['Literacy Rate (%)'] = pd.to_numeric(countryMerged['Literacy Rate (%)'], errors='coerce')\n",
        "\n",
        "# Separar\n",
        "belowAvrg = countryMerged[countryMerged['infrastructure_and_market_access'] <= avrgInfraestructure].dropna()\n",
        "AboveAvrg = countryMerged[countryMerged['infrastructure_and_market_access'] > avrgInfraestructure].dropna()\n",
        "\n",
        "# Eliminar duplicados\n",
        "x = AboveAvrg['Literacy Rate (%)'].dropna()\n",
        "y = belowAvrg['Literacy Rate (%)'].dropna()\n",
        "\n",
        "# Grados de libertad y media\n",
        "n1=len(x)\n",
        "n2=len(y)\n",
        "mu= y.mean()\n",
        "dof = min(n1,n2) - 1\n",
        "\n",
        "# t - Test\n",
        "t_stat, p_val = stats.ttest_ind(x, y)\n",
        "\n",
        "# Resultados\n",
        "print(\"t-statistic = \" + str(t_stat))\n",
        "print(\"p-value = \" + str(p_val))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HxGWTA7KFYOX",
        "outputId": "2914b290-f3a8-4eb8-9188-e18cfca3e977"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "t-statistic = -6.659456405675365\n",
            "p-value = 5.583855917765945e-10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Estos resultados reflejan que la taza de alfabetizacion en los paises con menor acceso a infraestructura es significativamente menor que la de de los paises con mayor acceso, dado esto podemos rechazar la hipotesis."
      ],
      "metadata": {
        "id": "xRbAHLZpSBEP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Utlice diagramas de cajas para estudiar la distribución de cada uno de los grupos\n",
        "# de análisis. Al igual que en el lab 3, grafique las distribuciones de cada grupo, uno a\n",
        "# la par del otro."
      ],
      "metadata": {
        "id": "blYWYY_oLKuw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Political regime\n",
        "liberal_democracy['Zone'] = 'Liberal Democracy'\n",
        "Electoral_autocracy['Zone'] = 'Electoral Autocracy'\n",
        "\n",
        "# Unir\n",
        "mergedRegime = pd.concat([liberal_democracy, Electoral_autocracy])\n",
        "\n",
        "# Grafico\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.boxplot(x='Zone', y='Life Expectancy (Years)', data=mergedRegime)\n",
        "plt.title('Life expectancy and political regime')\n",
        "plt.ylabel('Life Expectancy (Years)')\n",
        "plt.show()\n",
        "\n",
        "# Forest coverage\n",
        "belowAvrg = countryMerged[countryMerged['Forest Coverage (%)'] <= mediaCobertura].dropna()\n",
        "AboveAvrg = countryMerged[countryMerged['Forest Coverage (%)'] > mediaCobertura].dropna()\n",
        "\n",
        "belowAvrg['Zone'] = 'Below Average'\n",
        "AboveAvrg['Zone'] = 'Above Average'\n",
        "\n",
        "mergedForests = pd.concat([belowAvrg, AboveAvrg])\n",
        "\n",
        "# Grafico\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.boxplot(x='Zone', y='Life Expectancy (Years)', data=mergedForests)\n",
        "plt.title('Life Expectancy and Forest Coverage')\n",
        "plt.ylabel('Life Expectancy (Years)')\n",
        "plt.show()\n",
        "\n",
        "# Infrastructure\n",
        "AboveAvrg = countryMerged[countryMerged['infrastructure_and_market_access'] <= mediaCobertura].dropna()\n",
        "belowAvrg= countryMerged[countryMerged['infrastructure_and_market_access'] > mediaCobertura].dropna()\n",
        "\n",
        "belowAvrg['Zone'] = 'Below Average'\n",
        "AboveAvrg['Zone'] = 'Above Average'\n",
        "\n",
        "mergedInfrastructure = pd.concat([belowAvrg, AboveAvrg])\n",
        "\n",
        "# Grafico\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.boxplot(x='Zone', y='Literacy Rate (%)', data=mergedInfrastructure)\n",
        "plt.title('Literacy Rate and Infrastructure')\n",
        "plt.ylabel('Literacy Rate (%)')\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "tuII-YrPMR2X",
        "outputId": "e6a565e6-23e8-488b-b280-3967d950f087"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0kAAAIjCAYAAADWYVDIAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABTI0lEQVR4nO3dfXzO9f////sx246NnRnGFhvmXEqInCsnc5qzyFkmSuFNKpVSziVS6VSt5FwUpfroxLkKoTCFnNucyzBmNmzP3x99d/xeR3OyQ9sO43a9XI4Lr+fr+Xq+HsexwzH34/V6PV82Y4wRAAAAAECS5OHuAgAAAADgZkJIAgAAAAALQhIAAAAAWBCSAAAAAMCCkAQAAAAAFoQkAAAAALAgJAEAAACABSEJAAAAACwISQAAAABgQUgCkGccOHBANptN06dPd2r/4YcfVLVqVfn4+Mhms+nMmTNuqQ+3hqu9zwAAtw9CEoCbwvTp02Wz2fTbb7+5tF1CQoI6d+4sX19fvf/++5o1a5YKFCjwn2rJ+E/y1R6vvfbafxo/tyQnJ2vkyJFatWqVu0u5Ja1ateqq75EuXbq4u7wr+uCDD1wOfykpKXrrrbdUq1YtBQYGysfHR+XKldP//vc/7dq1K2cKBQA383R3AQCQVREREbpw4YK8vLwcbRs3btS5c+c0ZswYNWnSJFv317VrV7Vs2TJT+z333JOt+8kpycnJGjVqlCSpUaNG7i3mFjZo0CDde++9Tm0lS5Z0TzHX8cEHH6hw4cLq1atXlvqfPHlSzZs31++//67WrVurW7du8vPz086dOzVv3jzFxMTo4sWLOVs0ALgBIQlAnmGz2eTj4+PUduLECUlSUFBQtu+vWrVq6tGjR7aPi1tL/fr19dBDD2X7uOfPn//PR0X/q169emnz5s1asGCBOnbs6LRuzJgxGjZsmJsqu7ab4bUDkLdxuh2APOPf14o0atRI0dHRkqR7771XNpvN6Rvy9evXq3nz5goMDFT+/PnVsGFDrVmzJtvqWbFihTw8PDR8+HCn9rlz58pms2nKlCmONpvNpv/973+aM2eOypcvLx8fH1WvXl0//fRTpnEPHz6s3r17q2jRorLb7apcubI+/fTTTP1SUlI0cuRIlStXTj4+PgoNDVWHDh20d+9eHThwQEWKFJEkjRo1ynEa2MiRIyVJW7duVa9evVS6dGn5+PioWLFi6t27txISEpz2MXLkSNlsNu3Zs0e9evVSUFCQAgMD9eijjyo5OTlTTbNnz1bNmjWVP39+FSxYUA0aNNCSJUskSdHR0SpcuLAuXbqUabtmzZqpfPny13y9f/75Z3Xq1Enh4eGy2+0qUaKEnn76aV24cMGpX69eveTn56fDhw+rXbt28vPzU5EiRTRkyBClpaU59T1z5ox69eqlwMBABQUFKTo6Otuvadu8ebNatGihgIAA+fn5qXHjxvr111+d+mScbrp69Wr1799fISEhKl68uGP9999/r/r166tAgQLy9/dXq1attG3bNqcxjh07pkcffVTFixeX3W5XaGio2rZtqwMHDkj65+jWtm3btHr1asf74VpHGNevX6/FixerT58+mQKSJNntdk2aNMmpbcWKFY46g4KC1LZtW+3YscOxfsGCBY7n+W8fffSRbDab/vzzT0fbX3/9pYceekjBwcHy8fFRjRo19M0332T5tYuLi1P//v1Vvnx5+fr6qlChQurUqZPjNbHaunWrGjZsKF9fXxUvXlxjx47VtGnTZLPZMvXPys8DQN7GkSQAedawYcNUvnx5xcTEaPTo0SpVqpQiIyMl/fOftRYtWqh69eoaMWKEPDw8NG3aND3wwAP6+eefVbNmzeuOn5ycrJMnT2ZqDwoKkqenpx544AH1799f48ePV7t27VStWjUdPXpUAwcOVJMmTfTkk086bbd69WrNnz9fgwYNkt1u1wcffKDmzZtrw4YNuvPOOyVJx48f13333ecIVUWKFNH333+vPn366OzZsxo8eLAkKS0tTa1bt9by5cvVpUsXPfXUUzp37pyWLl2qP//8U02aNNGUKVPUr18/tW/fXh06dJAk3XXXXZKkpUuXat++fXr00UdVrFgxbdu2TTExMdq2bZt+/fVX2Ww2p9o7d+6sUqVKafz48dq0aZM++eQThYSEaMKECY4+o0aN0siRI1WnTh2NHj1a3t7eWr9+vVasWKFmzZrpkUce0cyZM/Xjjz+qdevWju2OHTumFStWaMSIEdf8eXzxxRdKTk5Wv379VKhQIW3YsEHvvvuuDh06pC+++MKpb1pamqKiolSrVi1NmjRJy5Yt0xtvvKHIyEj169dPkmSMUdu2bfXLL7/oySefVMWKFfXVV185gndWnTt3LtP7JDg4WB4eHtq2bZvq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X6Smpjq+Fd+7d6+Sk5Md1zq4IqPuHj16XDXgZVxT9F917txZa9eu1XPPPaeqVavKz89P6enpat68+RWPsv37G/oM1v90ZkWlSpVUvXp1zZ49Wz179tTs2bPl7e2tzp07X3O7tLQ0NW3aVKdOndILL7ygChUqqECBAjp8+LB69eqVqear1Xuzsx75kP7/98SsWbOuGHasIXnw4MFq06aNFi1apB9//FGvvPKKxo8frxUrVtzQtPUVKlSQJP3xxx+qX7++y9tfjd1uV7t27fTVV1/pgw8+0PHjx7VmzRq9+uqrjj4Zz3vIkCGKioq64jj/DjD/fu0kaeDAgZo2bZoGDx6s2rVrKzAw0HEfq6wcTf43V34eAPI2/jUDuOVkTN4QEBCQ7fdOupIRI0Zox44dmjRpkl544QUNHTpU77zzTqZ+Gd9CW+3atUv58+d3HPXw9/dXWlradeuOjIzU+vXrdenSJaf7Rlld7bS706dPa/ny5Ro1apTTzHxXqi+rIiMjlZ6eru3bt181mGbo2bOnnnnmGR09elRz585Vq1atrntU748//tCuXbs0Y8YM9ezZ09G+dOnSG645IiJCy5cvV1JSklNo3rlz5w2PaVWkSBHlz5//iuP99ddf8vDwUIkSJa45RsZ7OSQkJEvv5cjISD377LN69tlntXv3blWtWlVvvPGGZs+eLSlrp2JmaNOmjcaPH6/Zs2dfNyRFRERIuvJr99dff6lw4cJOU3I//PDDmjFjhpYvX64dO3bIGOM41U6S4/RELy+v//RveMGCBYqOjtYbb7zhaEtJSck0g2FERIT27NmTaft/t7n68wCQd3FNEoBbTvXq1RUZGalJkyYpKSkp0/q///472/a1fv16TZo0SYMHD9azzz6r5557Tu+9994Vpzhet26d03UQBw8e1Ndff61mzZopX758ypcvnzp27KiFCxc6TYN8pbo7duyokydP6r333svUL+PoTsbRrH//hzDjKMu/jwJNnjw5a0/6Ctq1aycPDw+NHj060zf0/95P165dZbPZ9NRTT2nfvn1ZuhfVlWo2xujtt9++4Zpbtmypy5cvO03VnpaWpnffffeGx7TKly+fmjVrpq+//tppCunjx49r7ty5qlev3nVPz4qKilJAQIBeffXVK06dnvGeSE5OVkpKitO6yMhI+fv7KzU11dFWoECBLE9xXrt2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Y6/7vIEbZgBcVXR0tGnbtq1j+dy5c+aJJ54wZcqUMWlpacYYYy5evGgqVqxoevfubbZu3Wq2b99uunXrZsqXL29SU1OvOM6gQYNMWFiY+e6778y2bdtMdHS0KViwoElISDDGGPPMM8+YVq1aGWOMSU9PN8HBwaZw4cLm+++/N8YYM3v2bHPHHXdcs/Y9e/YYu91uTp06ZRISEoyPj485cOCAMcaYU6dOGW9vb7Ns2TJH/4SEBKe2n376yQQEBJjp06ebvXv3miVLlpiSJUuakSNHOraRZEJCQsynn35q9u7da+Li4szFixfN8OHDzcaNG82+ffvM7NmzTf78+c38+fMd240dO9YEBwebL7/80uzYscM8+eSTJiAgwOk1Gjt2rKlQoYL54YcfzN69e820adOM3W43q1atytLPDgCy09SpU02NGjWMMcZ8++23JjIy0qSnpzvWr1y50kgyFStWNEuWLDFbt241rVu3NiVLljQXL140xhjz22+/GQ8PDzN69Gizc+dOM23aNOPr62umTZtmjDHmzz//NJLMnj17HONmtO3evdsY88/nf2hoqFm4cKHZt2+fWbhwoQkODjbTp0+/4fr/7//+z/j6+ppz5845+n/77bfG19fXnD171hhz/c/kjOd/1113mSVLlpg9e/aYhIQEs2XLFvPhhx+aP/74w+zatcu8/PLLxsfHx8TFxTn21aRJE1O1alXz66+/mt9//900bNjQ+Pr6mrfeesupT5s2bczGjRvNrl27zLPPPmsKFSrk+L0JZDdCEnAN0dHRJl++fKZAgQKmQIECRpIJDQ01v//+u6PPrFmzTPny5Z1+WaamphpfX1/z448/OsbJCABJSUnGy8vLzJkzx9H/4sWLJiwszEycONEYY8w333xjAgMDzeXLl82WLVtMsWLFzFNPPWVeeOEFY4wxjz32mOnWrds1a3/ppZdMu3btHMtt27Y1I0aMcFru3bu3Y/mjjz4yYWFhjvDXuHFj8+qrrzqNOWvWLBMaGupYlmQGDx58zTqMMWbAgAGmY8eOjuWiRYua119/3bF8+fJlEx4e7niNUlJSTP78+c3atWudxunTp4/p2rXrdfcHANmtTp06ZvLkycYYYy5dumQKFy5sVq5c6VifERLmzZvnaEtISDC+vr6OL4m6detmmjZt6jTuc889ZypVquRYvvvuu83o0aMdyy+++KKpVauWYzkyMtLMnTvXaYwxY8aY2rVr33D9GcszZ8509O/atat5+OGHjTFZ+0zOeP6LFi26Zh3GGFO5cmXz7rvvGmOM2bFjh5FkNm7c6Fi/e/duI8kRkn7++WcTEBBgUlJSnMaJjIw0H3300XX3B9wITrcDruP+++/Xli1btGXLFm3YsEFRUVFq0aKF4uLiJEmxsbHas2eP/P395efnJz8/PwUHByslJUV79+7NNN7evXt16dIl1a1b19Hm5eWlmjVraseOHZKk+vXr69y5c9q8ebNWr16thg0bqlGjRlq1apUkafXq1WrUqNFVa05LS9OMGTPUo0cPR1uPHj00ffp0xyl23bt318KFCx0TOsyZM0ddunSRh4eH43mNHj3a8Zz8/Pz0+OOP6+jRo0pOTnaMW6NGjUz7f//991W9enUVKVJEfn5+iomJUXx8vCQpMTFRx48fV82aNR398+XLp+rVqzuW9+zZo+TkZDVt2tRp/zNnzrziawoAOWnnzp3asGGDunbtKkny9PTUww8/7HQac4batWs7/h4cHKzy5cs7Ptt37Njh9NkvSXXr1tXu3buVlpYm6Z/P5rlz50r657qezz77TN27d5cknT9/Xnv37lWfPn2cPhvHjh17zc/G69Xv6empzp07a86cOY79fP311479uvKZ/O/fCUlJSRoyZIgqVqyooKAg+fn5aceOHY7fCTt37pSnp6eqVavm2KZMmTIqWLCgYzk2NlZJSUkqVKiQ0/7379/P7wTkGE93FwDc7AoUKKAyZco4lj/55BMFBgbq448/1tixY5WUlKTq1as7frlYFSlS5Ib2GRQUpLvvvlurVq3SunXr1LRpUzVo0EAPP/ywdu3apd27d6thw4ZX3f7HH3/U4cOHM51jnpaWpuXLl6tp06Zq06aNjDFavHix7r33Xv3888966623HH2TkpI0atQodejQIdP4Pj4+jr8XKFDAad28efM0ZMgQvfHGG6pdu7b8/f31+uuva/369Vl+/hnXXi1evFh33HGH0zq73Z7lcQAgO0ydOlWXL19WWFiYo80YI7vdrvfee0+BgYHZtq+uXbvqhRde0KZNm3ThwgUdPHjQ8Vme8dn48ccfZ7p2KV++fP+p/u7du6thw4Y6ceKEli5dKl9fXzVv3txpv1n5TP7374QhQ4Zo6dKlmjRpksqUKSNfX189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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Pregunta 10, tests de Kolmogorov\n",
        "\n",
        "# Función para hacer la prueba pasándole los datos necesarios, esto simplifica el código\n",
        "def pruebas_normalidad(data, variable, grupos):\n",
        "    resultados = {}\n",
        "    for grupo in grupos:\n",
        "        subset = data[data['Zone'] == grupo][variable].dropna()\n",
        "        ks_stat, ks_p = kstest(subset, 'norm', args=(subset.mean(), subset.std()))  # Kolmogorov-Smirnov\n",
        "        resultados[grupo] = {\n",
        "            'Kolmogorov-Smirnov': {'stat': ks_stat, 'p_value': ks_p}\n",
        "        }\n",
        "    return resultados\n",
        "\n",
        "# Aplicar pruebas a los datos con la función\n",
        "resultados_politico = pruebas_normalidad(mergedRegime, 'Life Expectancy (Years)', ['Liberal Democracy', 'Electoral Autocracy'])\n",
        "resultados_forestal = pruebas_normalidad(mergedForests, 'Life Expectancy (Years)', ['Below Average', 'Above Average'])\n",
        "resultados_infraestructura = pruebas_normalidad(mergedInfrastructure, 'Literacy Rate (%)', ['Below Average', 'Above Average'])\n",
        "\n",
        "# Función para imprimir resultados e indicar normalidad\n",
        "def imprimir_resultados(resultados):\n",
        "    # Ciclo para iterar por los resultados x pregunta x grupo\n",
        "    for pregunta, grupos in resultados.items():\n",
        "        print(f\"Resultados para: {pregunta}\")\n",
        "        for grupo, tests in grupos.items():\n",
        "            print(f\"Grupo: {grupo}\")\n",
        "            # :.4\n",
        "            print(f\"Kolmogorov-Smirnov: stat={tests['Kolmogorov-Smirnov']['stat']:.4f}, p-value={tests['Kolmogorov-Smirnov']['p_value']:.4f} → {'Normal' if tests['Kolmogorov-Smirnov']['p_value'] > 0.05 else 'No Normal'}\")\n",
        "        print(\"\\n\") # Saltp de linea\n",
        "\n",
        "# Imprimir los resultados con la función\n",
        "imprimir_resultados({\"Political Regime\": resultados_politico, \"Forest Coverage\": resultados_forestal,\"Infrastructure\": resultados_infraestructura})\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xNYKMkChilz0",
        "outputId": "3fd1e0e2-33e8-45d0-ffe5-d500a04f156d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Resultados para: Political Regime\n",
            "Grupo: Liberal Democracy\n",
            "Kolmogorov-Smirnov: stat=0.0876, p-value=0.6075 → Normal\n",
            "Grupo: Electoral Autocracy\n",
            "Kolmogorov-Smirnov: stat=0.0913, p-value=0.7842 → Normal\n",
            "\n",
            "\n",
            "Resultados para: Forest Coverage\n",
            "Grupo: Below Average\n",
            "Kolmogorov-Smirnov: stat=0.1191, p-value=0.2390 → Normal\n",
            "Grupo: Above Average\n",
            "Kolmogorov-Smirnov: stat=0.0796, p-value=0.7209 → Normal\n",
            "\n",
            "\n",
            "Resultados para: Infrastructure\n",
            "Grupo: Below Average\n",
            "Kolmogorov-Smirnov: stat=0.1001, p-value=0.4375 → Normal\n",
            "Grupo: Above Average\n",
            "Kolmogorov-Smirnov: stat=0.2726, p-value=0.0000 → No Normal\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Political Regime\n",
        "El análisis de normalidad indica que las distribuciones de la esperanza de vida en ambos grupos, Liberal Democracy y Electoral Autocracy, son **normales**. Esto permitió aplicar un t-test que mostró diferencias entre los dos regímenes.\n",
        "\n",
        "**Conclusión**:\n",
        "Los regímenes democráticos tienen un impacto positivo en la esperanza de vida, posiblemente debido a políticas más inclusivas, mayor inversión en salud y mejores condiciones socioeconómicas.\n",
        "Esto afirma la hipótesis de que la calidad de la gobernanza influye directamente en la calidad de vida.\n",
        "2. Forest Coverage\n",
        "Ambos grupos (\"Below Average\" y \"Above Average\") también mostraron distribuciones **normales**, lo que permitió el uso de un t-test para comparar la esperanza de vida. Aunque hubo diferencias, el impacto de la cobertura forestal fue menor que el de los regímenes políticos.\n",
        "\n",
        "**Conclusión**:\n",
        "Una mayor cobertura forestal está asociada con una esperanza de vida más alta, lo que sugiere beneficios relacionados con la calidad del aire, recursos naturales y salud ambiental.\n",
        "\n",
        "3. Infrastructure\n",
        "En este caso, se observó una diferencia mayor en las distribuciones:\n",
        "El grupo con infraestructura \"Below Average\" presentó una distribución **normal**, mientras que el grupo \"Above Average\" no cumplió con el supuesto de normalidad.\n",
        "Esto requirió el uso de diferentes pruebas estadísticas: un t-test para el grupo \"Below Average\" y una prueba no paramétrica (Mann-Whitney U) para el grupo \"Above Average\". Ambos análisis mostraron que la infraestructura tiene un impacto significativo en la tasa de alfabetización.\n",
        "\n",
        "**Conclusión**:\n",
        "Los países con infraestructura más desarrollada tienen tasas de alfabetización significativamente más altas, lo que subraya la importancia de invertir en infraestructura para mejorar el acceso a la educación.\n",
        "A diferencia de los regímenes políticos y la cobertura forestal, cuyo impacto se reflejó en la esperanza de vida, la infraestructura afecta directamente un aspecto fundamental del desarrollo humano: la alfabetización."
      ],
      "metadata": {
        "id": "OPPSXLcAzwqN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Pregunta 11; T tests\n",
        "\n",
        "from scipy.stats import ttest_ind, mannwhitneyu\n",
        "\n",
        "# Función para realizar pruebas entre grupos\n",
        "def pruebas_comparacion(data, variable, grupo_col, grupo1, grupo2, test_type):\n",
        "    subset1 = data[data[grupo_col] == grupo1][variable].dropna()\n",
        "    subset2 = data[data[grupo_col] == grupo2][variable].dropna()\n",
        "\n",
        "    if test_type == 't-test':\n",
        "        stat, p_value = ttest_ind(subset1, subset2)\n",
        "        test_name = \"t-test\"\n",
        "    elif test_type == 'Mann-Whitney U':\n",
        "        stat, p_value = mannwhitneyu(subset1, subset2)\n",
        "        test_name = \"Mann-Whitney U\"\n",
        "    else:\n",
        "        raise ValueError(\"Tipo de prueba no reconocido\")\n",
        "\n",
        "    return {\"test\": test_name, \"stat\": stat, \"p_value\": p_value}\n",
        "\n",
        "# Comparaciones\n",
        "# Political Regime\n",
        "political_test = pruebas_comparacion(mergedRegime, 'Life Expectancy (Years)', 'Zone', 'Liberal Democracy', 'Electoral Autocracy', 't-test')\n",
        "\n",
        "# Forest Coverage\n",
        "forest_test = pruebas_comparacion(mergedForests, 'Life Expectancy (Years)', 'Zone', 'Below Average', 'Above Average', 't-test')\n",
        "\n",
        "# Infrastructure\n",
        "infra_below_test = pruebas_comparacion(mergedInfrastructure, 'Literacy Rate (%)', 'Zone', 'Below Average', 'Above Average', 't-test')\n",
        "infra_above_test = pruebas_comparacion(mergedInfrastructure, 'Literacy Rate (%)', 'Zone', 'Below Average', 'Above Average', 'Mann-Whitney U')\n",
        "\n",
        "# Resultados\n",
        "print(\"Resultados de las comparaciones:\")\n",
        "print(f\"Political Regime (t-test): stat={political_test['stat']:.4f}, p-value={political_test['p_value']:.4f}\")\n",
        "print(f\"Forest Coverage (t-test): stat={forest_test['stat']:.4f}, p-value={forest_test['p_value']:.4f}\")\n",
        "print(f\"Infrastructure (t-test, Below Average): stat={infra_below_test['stat']:.4f}, p-value={infra_below_test['p_value']:.4f}\")\n",
        "print(f\"Infrastructure (Mann-Whitney U, Above Average): stat={infra_above_test['stat']:.4f}, p-value={infra_above_test['p_value']:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rm0EKzH-0tNn",
        "outputId": "716f2249-b3d3-48f6-9e37-85c5272d73cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Resultados de las comparaciones:\n",
            "Political Regime (t-test): stat=19.3480, p-value=0.0000\n",
            "Forest Coverage (t-test): stat=-2.1618, p-value=0.0323\n",
            "Infrastructure (t-test, Below Average): stat=6.6595, p-value=0.0000\n",
            "Infrastructure (Mann-Whitney U, Above Average): stat=3928.5000, p-value=0.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Conclusiones\n",
        "\n",
        " **1. Relación entre factores socioeconómicos y calidad de vida**  \n",
        "A través de lo investigado en el proyecto, se confirma que múltiples factores socioeconómicos y ambientales impactan los indicadores como la esperanza de vida, la pobreza y la criminalidad.\n",
        "\n",
        "- **Regímenes políticos y esperanza de vida**:  \n",
        "  Los países con regímenes democráticos liberales tienen una esperanza de vida  mayor que los países con regímenes autocráticos. Esto puede ser debido a una mejor gobernanza, mayor inversión en salud pública y estabilidad socioeconómica, esto se  ve en el Modelo 1.\n",
        "\n",
        "- **Desigualdad de género y pobreza**:  \n",
        "  La igualdad de género tiene una relación negativa con la tasa de pobreza, como se observó en el Modelo 2. Esto sugiere que políticas orientadas a mejorar la igualdad de género no solo promueven la equidad, sino que también tienen un impacto socioeconómico positivo al reducir la pobreza. Sin embargo, la dispersión de los datos indica que hay otros factores que también influyen.\n",
        "\n",
        "\n",
        " **2. Factores ambientales y su relación con la esperanza de vida**  \n",
        "La cobertura forestal se identificó como un factor significativo para la esperanza de vida. Esto podría estar relacionado con el papel de los bosques en mantener ecosistemas saludables, regular la calidad del aire y proporcionar recursos naturales esenciales. Aunque el impacto no es tan fuerte como el de los regímenes políticos, la preservación de los bosques podría considerarse una estrategia para mejorar la calidad de vida.\n",
        "\n",
        " **3. Infraestructura y alfabetización**  \n",
        "La infraestructura, evaluada tanto en niveles bajos como altos, mostró un impacto significativo en la tasa de alfabetización. Esto destaca la importancia de invertir en infraestructura, especialmente en países en desarrollo, para mejorar el acceso a la educación.\n",
        "\n",
        " **4. Empleo, corrupción y criminalidad**  \n",
        "El Modelo 3 evidencia que la criminalidad aumenta significativamente con el desempleo y la corrupción. Este resultado refuerza la necesidad de hacer algo al respecto la corrupción del sistema y promover políticas que generen empleo como estrategias para reducir la criminalidad.\n",
        "\n",
        " **Resumen **  \n",
        "Los resultados dicen que políticas orientadas hacia una gobernanza democrática, igualdad de género, preservación ambiental y desarrollo de infraestructura pueden tener efectos positivos significativos en la calidad de vida y el desarrollo humano. Sin embargo, la dispersión observada en los modelos sugiere que estas relaciones son complejas y que otros factores, como el contexto socioeconómico y cultural, también desempeñan un papel crucial. Esto prueba una vez más la necesidad de tener sistemas que busquen resolver los problemas de una forma integral."
      ],
      "metadata": {
        "id": "VnCpT6ke3NVq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Bibliografia:\n",
        "\n",
        "Amazon Web Services. (s.f.). *¿Qué diferencia hay entre la regresión lineal y la regresión logística?*.https://aws.amazon.com/es/compare/the-difference-between-linear-regression-and-logistic-regression/\n",
        "\n",
        "Betania, V. (2024). *Los mejores modelos de lenguaje grandes (LLM) para 2024 y cómo elegir el adecuado para tu sitio*. https://www.hostinger.es/tutoriales/modelos-grandes-de-lenguaje-llm\n",
        "\n",
        "Gonzalez, L. (2019). *Ventajas y Desventajas de los Algoritmos de Regresión*. https://aprendeia.com/ventajas-y-desventajas-de-los-algoritmos-de-regresion-machine-learning/\n",
        "   \n",
        "   Norman, A.(2024). *2023 Global Prosperity Index w/ region politics*.https://www.kaggle.com/datasets/aaronnorman/2023-global-prosperity-index-w-region-politics\n",
        "\n",
        "  Singh,S.(2022).*Quality of life in a country comparison*.https://www.kaggle.com/datasets/shivamsingh0194/quality-of-life-in-a-country-comparison\n",
        "\n",
        "RPubs - Transformaciones para conseguir normalidad. (n.d.). https://rpubs.com/JairoAyala/TNM\n",
        "\n",
        "SPSS Statistics Subscription - Classic. (2024, September 30). https://www.ibm.com/docs/es/spss-statistics/saas?topic=tests-one-sample-kolmogorov-smirnov-test\n",
        "\n",
        "Academia, L. (2023, November 23). Democracia versus Autocracia: Dos sistemas de gobierno en contraste - Academia de Centroamérica. Academia de Centroamérica. https://www.academiaca.or.cr/opinion/democracia-versus-autocracia-dos-sistemas-de-gobierno-en-contraste/"
      ],
      "metadata": {
        "id": "ozW49cd3BcB-"
      }
    }
  ]
}
